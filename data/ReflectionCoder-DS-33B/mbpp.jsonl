{"task_id": "Mbpp/2", "completion": "def similar_elements(list1, list2):\n    return [value for value in list1 if value in list2]"}
{"task_id": "Mbpp/3", "completion": "def is_not_prime(n):\n    if n <= 1:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False"}
{"task_id": "Mbpp/4", "completion": "import heapq\n\ndef heap_queue_largest(nums, n):\n    return heapq.nlargest(n, nums)"}
{"task_id": "Mbpp/6", "completion": "def differ_At_One_Bit_Pos(a, b):\n    x = a ^ b\n    return (x and not(x & (x - 1)))"}
{"task_id": "Mbpp/7", "completion": "def find_char_long(s):\n    return [word for word in s.split() if len(word) >= 4]"}
{"task_id": "Mbpp/8", "completion": "def square_nums(nums):\n    return [num**2 for num in nums]"}
{"task_id": "Mbpp/9", "completion": "def find_Rotations(s):\n    n = len(s)\n    for i in range(1, n):\n        if s[i:] + s[:i] == s:\n            return i\n    return n"}
{"task_id": "Mbpp/11", "completion": "def remove_Occ(string, char):\n    first = string.find(char)\n    last = string.rfind(char)\n    if first == last:\n        return string\n    else:\n        return string[:first] + string[first+1:last] + string[last+1:]"}
{"task_id": "Mbpp/12", "completion": "def sort_matrix(matrix):\n    return sorted(matrix, key=sum)"}
{"task_id": "Mbpp/14", "completion": "def find_Volume(length, width, height):\n    return (1/2) * length * width * height"}
{"task_id": "Mbpp/16", "completion": "def text_lowercase_underscore(s):\n    \"\"\"\n    Returns True if the input string contains sequences of lowercase letters joined with an underscore,\n    otherwise returns False.\n    \"\"\"\n    import re\n    pattern = r'[a-z]+_[a-z]+'\n    return bool(re.search(pattern, s))"}
{"task_id": "Mbpp/17", "completion": "def square_perimeter(side_length):\n    return 4 * side_length"}
{"task_id": "Mbpp/18", "completion": "def remove_dirty_chars(s1, s2):\n    return ''.join([char for char in s1 if char not in s2])"}
{"task_id": "Mbpp/19", "completion": "def test_duplicate(arr):\n    return len(arr) != len(set(arr))"}
{"task_id": "Mbpp/20", "completion": "def is_woodall(n):\n    \"\"\"\n    Check if a number is a Woodall number.\n    A Woodall number is a number that can be expressed as n*2^n - 1 for some n.\n    \"\"\"\n    # Check if the number is of the form n*2^n - 1\n    for i in range(1, n+1):\n        if n == i * (2 ** i) - 1:\n            return True\n    return False"}
{"task_id": "Mbpp/56", "completion": "def check(num):\n    reverse_num = int(str(num)[::-1])\n    return num == reverse_num - 1"}
{"task_id": "Mbpp/57", "completion": "def find_Max_Num(digits):\n    # Convert each digit to string\n    str_digits = [str(digit) for digit in digits]\n    \n    # Sort the digits in descending order\n    str_digits.sort(reverse=True)\n    \n    # Join the sorted digits to form a number\n    max_num = int(\"\".join(str_digits))\n    \n    return max_num"}
{"task_id": "Mbpp/58", "completion": "def opposite_Signs(x, y):\n    return (x >= 0 and y < 0) or (x < 0 and y >= 0)"}
{"task_id": "Mbpp/59", "completion": "def is_octagonal(n):\n    return n * (3*n - 2)"}
{"task_id": "Mbpp/61", "completion": "def count_Substrings(s):\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            substring = s[i:j+1]\n            if sum(int(digit) for digit in substring) == len(substring):\n                count += 1\n    return count"}
{"task_id": "Mbpp/62", "completion": "def smallest_num(lst):\n    return min(lst)"}
{"task_id": "Mbpp/63", "completion": "def max_difference(tuple_list):\n    max_diff = 0\n    for tup in tuple_list:\n        diff = abs(tup[0] - tup[1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"}
{"task_id": "Mbpp/64", "completion": "def subject_marks(lst):\n    lst.sort(key=lambda x: x[1])\n    return lst"}
{"task_id": "Mbpp/65", "completion": "def recursive_list_sum(lst):\n    total = 0\n    for element in lst:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total"}
{"task_id": "Mbpp/66", "completion": "def pos_count(lst):\n    return len([x for x in lst if x > 0])"}
{"task_id": "Mbpp/67", "completion": "def bell_number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]"}
{"task_id": "Mbpp/68", "completion": "def is_Monotonic(A):\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1)))"}
{"task_id": "Mbpp/69", "completion": "def is_sublist(lst, sublist):\n    sub_len = len(sublist)\n    for i in range(len(lst) - sub_len + 1):\n        if lst[i:i + sub_len] == sublist:\n            return True\n    return False"}
{"task_id": "Mbpp/70", "completion": "def get_equal(tuples):\n    lengths = set()\n    for tup in tuples:\n        lengths.add(len(tup))\n    return len(lengths) == 1"}
{"task_id": "Mbpp/71", "completion": "def comb_sort(arr):\n    gap = len(arr)\n    shrink_factor = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink_factor)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n\n        i = 0\n        while i + gap < len(arr):\n            if arr[i] > arr[i + gap]:\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                sorted = False\n            i += 1\n\n    return arr"}
{"task_id": "Mbpp/72", "completion": "def dif_Square(n):\n    \"\"\"\n    This function checks whether a given number can be represented as the difference of two squares.\n    \"\"\"\n    if n < 0:\n        n = -n\n\n    # Check if n can be expressed as the difference of two squares\n    for i in range(int(n**0.5) + 1):\n        for j in range(i, int(n**0.5) + 1):\n            if i**2 - j**2 == n:\n                return True\n\n    return False"}
{"task_id": "Mbpp/74", "completion": "def is_samepatterns(colors, patterns):\n    pattern_map = {}\n    for i in range(len(colors)):\n        if colors[i] not in pattern_map:\n            pattern_map[colors[i]] = patterns[i]\n        elif pattern_map[colors[i]] != patterns[i]:\n            return False\n    return True"}
{"task_id": "Mbpp/75", "completion": "def find_tuples(tuples_list, k):\n    return [t for t in tuples_list if all(x % k == 0 for x in t)]"}
{"task_id": "Mbpp/77", "completion": "def is_divisible_by_11(num):\n    return num % 11 == 0"}
{"task_id": "Mbpp/79", "completion": "def word_len(word):\n    return len(word) % 2 != 0"}
{"task_id": "Mbpp/80", "completion": "def tetrahedral_number(n):\n    return n * (n + 1) * (n + 2) // 6"}
{"task_id": "Mbpp/82", "completion": "import math\n\ndef volume_sphere(radius):\n    return (4/3) * math.pi * radius**3"}
{"task_id": "Mbpp/84", "completion": "def sequence(n):\n    if n == 1 or n == 2:\n        return 1\n    else:\n        return sequence(sequence(n-1)) + sequence(n - sequence(n-1))"}
{"task_id": "Mbpp/85", "completion": "import math\n\ndef surfacearea_sphere(radius):\n    return 4 * math.pi * radius * radius"}
{"task_id": "Mbpp/86", "completion": "def centered_hexagonal_number(n):\n    return 3*n*(n-1) + 1"}
{"task_id": "Mbpp/87", "completion": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    for d in (dict1, dict2, dict3):\n        merged_dict.update(d)\n    return merged_dict"}
{"task_id": "Mbpp/88", "completion": "def freq_count(lst):\n    freq_dict = {}\n    for item in lst:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"}
{"task_id": "Mbpp/89", "completion": "def closest_num(n):\n    return n - 1"}
{"task_id": "Mbpp/90", "completion": "def len_log(words):\n    return max(len(word) for word in words)"}
{"task_id": "Mbpp/91", "completion": "def find_substring(lst, query):\n    for string in lst:\n        if query in string:\n            return True\n    return False"}
{"task_id": "Mbpp/92", "completion": "def is_undulating(num):\n    num_str = str(num)\n    for i in range(len(num_str) - 2):\n        if (int(num_str[i]) + int(num_str[i+2])) / 2 != int(num_str[i+1]):\n            return False\n    return True"}
{"task_id": "Mbpp/93", "completion": "def power(a, b):\n    return a ** b"}
{"task_id": "Mbpp/94", "completion": "def index_minimum(lst):\n    return min(lst, key=lambda x: x[1])[0]"}
{"task_id": "Mbpp/95", "completion": "def Find_Min_Length(list_of_lists):\n    return min(len(lst) for lst in list_of_lists)"}
{"task_id": "Mbpp/96", "completion": "def divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"}
{"task_id": "Mbpp/97", "completion": "def frequency_lists(lst):\n    flat_list = [item for sublist in lst for item in sublist]\n    frequency = {}\n    for item in flat_list:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency"}
{"task_id": "Mbpp/98", "completion": "import math\n\ndef multiply_num(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"}
{"task_id": "Mbpp/99", "completion": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary"}
{"task_id": "Mbpp/100", "completion": "def next_smallest_palindrome(num):\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num\n\ndef is_palindrome(num):\n    return str(num) == str(num)[::-1]"}
{"task_id": "Mbpp/101", "completion": "def kth_element(arr, k):\n    return arr[k - 1]"}
{"task_id": "Mbpp/102", "completion": "def snake_to_camel(snake_str):\n    components = snake_str.split('_')\n    return components[0] + ''.join(x.title() for x in components[1:])"}
{"task_id": "Mbpp/103", "completion": "def eulerian_num(n, m):\n    if m >= n or m < 0:\n        return 0\n    euler = [[0 for _ in range(m+1)] for _ in range(n+1)]\n    euler[0][0] = 1\n    for i in range(1, n+1):\n        for j in range(min(i, m)+1):\n            if j == 0:\n                euler[i][j] = 1\n            else:\n                euler[i][j] = (j+1)*euler[i-1][j] + (i-j)*euler[i-1][j-1]\n    return euler[n][m]"}
{"task_id": "Mbpp/104", "completion": "def sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]"}
{"task_id": "Mbpp/105", "completion": "def count(lst):\n    return sum(lst)"}
{"task_id": "Mbpp/106", "completion": "def add_lists(lst, tup):\n    return tup + tuple(lst)"}
{"task_id": "Mbpp/108", "completion": "def merge_sorted_list(list1, list2, list3):\n    merged_list = list1 + list2 + list3\n    merged_list.sort()\n    return merged_list"}
{"task_id": "Mbpp/109", "completion": "def odd_Equivalent(binary_string, num_rotations):\n    count = 0\n    for i in range(num_rotations):\n        binary_string = binary_string[-1] + binary_string[:-1]\n        if int(binary_string, 2) % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "Mbpp/111", "completion": "def common_in_nested_lists(nested_lists):\n    if not nested_lists:\n        return []\n\n    common_elements = set(nested_lists[0])\n    for lst in nested_lists[1:]:\n        common_elements = common_elements.intersection(set(lst))\n\n    return list(common_elements)"}
{"task_id": "Mbpp/113", "completion": "def check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False"}
{"task_id": "Mbpp/116", "completion": "def tuple_to_int(t):\n    return int(''.join(map(str, t)))"}
{"task_id": "Mbpp/118", "completion": "def string_to_list(s):\n    return s.split(' ')"}
{"task_id": "Mbpp/119", "completion": "def search(arr):\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        # Check if mid is the single element\n        if (mid == 0 or arr[mid] != arr[mid - 1]) and (mid == len(arr) - 1 or arr[mid] != arr[mid + 1]):\n            return arr[mid]\n\n        # Check if mid is in the left half\n        if mid % 2 == 0:\n            if arr[mid] == arr[mid + 1]:\n                low = mid + 2\n            else:\n                high = mid - 1\n\n        # Check if mid is in the right half\n        else:\n            if arr[mid] == arr[mid - 1]:\n                low = mid + 1\n            else:\n                high = mid - 2\n\n    return -1"}
{"task_id": "Mbpp/120", "completion": "def max_product_tuple(lst):\n    max_product = 0\n    for tup in lst:\n        product = abs(tup[0] * tup[1])\n        if product > max_product:\n            max_product = product\n    return max_product"}
{"task_id": "Mbpp/123", "completion": "def sum_of_divisors(n):\n    divisors_sum = 1\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            if i == n // i:\n                divisors_sum += i\n            else:\n                divisors_sum += i + n // i\n    return divisors_sum\n\ndef amicable_numbers_sum(n):\n    amicable_sum = 0\n    for i in range(2, n + 1):\n        sum1 = sum_of_divisors(i)\n        if sum1 > i and sum_of_divisors(sum1) == i:\n            amicable_sum += i + sum1\n    return amicable_sum"}
{"task_id": "Mbpp/124", "completion": "import math\n\ndef angle_complex(z):\n    return math.atan2(z.imag, z.real)"}
{"task_id": "Mbpp/125", "completion": "def find_length(s):\n    max_diff = 0\n    curr_diff = 0\n    for i in range(len(s)):\n        if s[i] == '0':\n            curr_diff += 1\n        else:\n            curr_diff -= 1\n        if curr_diff < 0:\n            curr_diff = 0\n        max_diff = max(max_diff, curr_diff)\n    return max_diff"}
{"task_id": "Mbpp/126", "completion": "def sum_common_divisors(a, b):\n    def find_divisors(n):\n        divisors = []\n        for i in range(1, n + 1):\n            if n % i == 0:\n                divisors.append(i)\n        return divisors\n\n    divisors_a = find_divisors(a)\n    divisors_b = find_divisors(b)\n    common_divisors = set(divisors_a).intersection(divisors_b)\n    return sum(common_divisors)"}
{"task_id": "Mbpp/127", "completion": "def multiply_int(x, y):\n    return x * y"}
{"task_id": "Mbpp/128", "completion": "def long_words(n, sentence):\n    return [word for word in sentence.split() if len(word) > n]"}
{"task_id": "Mbpp/129", "completion": "def magic_square_test(matrix):\n    n = len(matrix)\n    # Check if the matrix is a square\n    if any(len(row) != n for row in matrix):\n        return False\n\n    # Calculate the sum of the first row\n    magic_sum = sum(matrix[0])\n\n    # Check the sum of each row\n    for row in matrix:\n        if sum(row) != magic_sum:\n            return False\n\n    # Check the sum of each column\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n)) != magic_sum:\n            return False\n\n    # Check the sum of the diagonals\n    if sum(matrix[i][i] for i in range(n)) != magic_sum or sum(matrix[i][n - 1 - i] for i in range(n)) != magic_sum:\n        return False\n\n    return True"}
{"task_id": "Mbpp/130", "completion": "def max_occurrences(lst):\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    max_freq = max(frequency.values())\n    max_items = [item for item, freq in frequency.items() if freq == max_freq]\n    return max_items[0]"}
{"task_id": "Mbpp/131", "completion": "def reverse_vowels(s):\n    vowels = set(\"aeiouAEIOU\")\n    s = list(s)\n    left, right = 0, len(s) - 1\n    while left < right:\n        while s[left] not in vowels and left < right:\n            left += 1\n        while s[right] not in vowels and left < right:\n            right -= 1\n        s[left], s[right] = s[right], s[left]\n        left += 1\n        right -= 1\n    return ''.join(s)"}
{"task_id": "Mbpp/132", "completion": "def tup_string(tup):\n    return ''.join(tup)"}
{"task_id": "Mbpp/133", "completion": "def sum_negativenum(numbers):\n    return sum(n for n in numbers if n < 0)"}
{"task_id": "Mbpp/135", "completion": "def hexagonal_num(n):\n    return n * (2 * n - 1)"}
{"task_id": "Mbpp/137", "completion": "import math\n\ndef zero_count(arr):\n    zeroes = arr.count(0)\n    non_zeroes = len(arr) - zeroes\n    return zeroes / non_zeroes"}
{"task_id": "Mbpp/138", "completion": "def is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return False\n    while n != 1:\n        if n % 2 != 0:\n            return False\n        n = n // 2\n    return True"}
{"task_id": "Mbpp/139", "completion": "import math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius"}
{"task_id": "Mbpp/140", "completion": "def extract_singly(list_of_lists):\n    \"\"\"\n    Flatten a list of lists into a single set of numbers.\n    \"\"\"\n    return set([item for sublist in list_of_lists for item in sublist])"}
{"task_id": "Mbpp/141", "completion": "def pancake_sort(lst):\n    for size in reversed(range(len(lst))):\n        max_ind = max(range(size + 1), key=lst.__getitem__)\n        if max_ind != size:\n            lst[0:max_ind+1] = reversed(lst[0:max_ind+1])\n            lst[0:size+1] = reversed(lst[0:size+1])\n    return lst"}
{"task_id": "Mbpp/142", "completion": "def count_samepair(list1, list2, list3):\n    return sum(a == b == c for a, b, c in zip(list1, list2, list3))"}
{"task_id": "Mbpp/145", "completion": "def max_Abs_Diff(arr):\n    # Initialize maximum difference\n    max_diff = 0\n\n    # Traverse the array\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            # Find the difference between two elements\n            diff = abs(arr[i] - arr[j])\n\n            # Update the maximum difference\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"}
{"task_id": "Mbpp/160", "completion": "def find_solution(a, b, n):\n    # Iterate through possible values of x and y\n    for x in range(-n, n+1):\n        for y in range(-n, n+1):\n            # Check if the current values of x and y satisfy the equation\n            if a * x + b * y == n:\n                return (x, y)\n    # If no solution is found, return None\n    return None"}
{"task_id": "Mbpp/161", "completion": "def remove_elements(lst1, lst2):\n    return [x for x in lst1 if x not in lst2]"}
{"task_id": "Mbpp/162", "completion": "def sum_series(n):\n    total_sum = 0\n    for i in range(n // 2 + 1):\n        total_sum += n - 2 * i\n    return total_sum"}
{"task_id": "Mbpp/165", "completion": "def count_char_position(s):\n    count = 0\n    for i in range(len(s)):\n        if i == ord(s[i].lower()) - ord('a'):\n            count += 1\n    return count"}
{"task_id": "Mbpp/166", "completion": "def find_even_pair(lst):\n    even_count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] ^ lst[j] % 2 == 0:\n                even_count += 1\n    return even_count"}
{"task_id": "Mbpp/167", "completion": "def next_power_of_2(n):\n    return 1 if n == 0 else 2**(n - 1).bit_length()"}
{"task_id": "Mbpp/168", "completion": "def frequency(lst, num):\n    return lst.count(num)"}
{"task_id": "Mbpp/170", "completion": "def sum_range_list(lst, start, end):\n    return sum(lst[start:end+1])"}
{"task_id": "Mbpp/171", "completion": "def perimeter_pentagon(side):\n    return 5 * side"}
{"task_id": "Mbpp/172", "completion": "def count_occurance(s):\n    return s.count('std')"}
{"task_id": "Mbpp/222", "completion": "def check_type(t):\n    return all(isinstance(x, type(t[0])) for x in t)"}
{"task_id": "Mbpp/223", "completion": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/224", "completion": "def count_Set_Bits(n):\n    count = 0\n    while (n):\n        count += n & 1\n        n >>= 1\n    return count"}
{"task_id": "Mbpp/226", "completion": "def odd_values_string(str):\n    result = \"\" \n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"}
{"task_id": "Mbpp/227", "completion": "def min_of_three(a, b, c):\n    return min(a, b, c)"}
{"task_id": "Mbpp/230", "completion": "def replace_blank(string, char):\n    return string.replace(' ', char)"}
{"task_id": "Mbpp/232", "completion": "def larg_nnum(lst, n):\n    lst.sort(reverse=True)\n    return lst[:n]"}
{"task_id": "Mbpp/233", "completion": "import math\n\ndef lateral_surface_cylinder(radius, height):\n    return 2 * math.pi * radius * height"}
{"task_id": "Mbpp/234", "completion": "def volume_cube(side_length):\n    return side_length ** 3"}
{"task_id": "Mbpp/235", "completion": "def even_bit_set_number(n):\n    binary = bin(n)[2:]  # Convert to binary and remove '0b' prefix\n    binary = binary.zfill(len(binary) + 1)  # Add a leading zero if the length is odd\n    result = ''\n    for i in range(len(binary)):\n        if i % 2 == 0:  # Set even bits to 1\n            result += '1'\n        else:\n            result += binary[i]\n    return int(result, 2)"}
{"task_id": "Mbpp/237", "completion": "def check_occurences(lst):\n    result = {}\n    for tup in lst:\n        sorted_tup = tuple(sorted(tup))\n        if sorted_tup in result:\n            result[sorted_tup] += 1\n        else:\n            result[sorted_tup] = 1\n    return result"}
{"task_id": "Mbpp/238", "completion": "def number_of_substrings(s):\n    n = len(s)\n    return n * (n + 1) // 2"}
{"task_id": "Mbpp/239", "completion": "def get_total_number_of_sequences(m, n):\n    if n == 0:\n        return 1\n    elif m < 2 * n:\n        return 0\n    else:\n        return sum(get_total_number_of_sequences(m // i, n - 1) for i in range(2, m // 2 + 2))"}
{"task_id": "Mbpp/240", "completion": "def replace_list(list1, list2):\n    list1[-1] = list2\n    return list1"}
{"task_id": "Mbpp/242", "completion": "def count_charac(s):\n    return len(s)"}
{"task_id": "Mbpp/244", "completion": "def next_Perfect_Square(num):\n    root = int(num**0.5)\n    if root*root == num:\n        return (root + 1)**2\n    else:\n        return -1"}
{"task_id": "Mbpp/245", "completion": "def max_sum(arr):\n    n = len(arr)\n    lis = [0] * n\n    lds = [0] * n\n\n    # Initialize LIS values for all indexes\n    for i in range(n):\n        lis[i] = arr[i]\n\n    # Compute LIS values\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and lis[i] < lis[j] + arr[i]:\n                lis[i] = lis[j] + arr[i]\n\n    # Compute LDS values\n    for i in range(n - 2, -1, -1):\n        for j in range(n - 1, i, -1):\n            if arr[i] > arr[j] and lds[i] < lds[j] + arr[i]:\n                lds[i] = lds[j] + arr[i]\n\n    # Return the maximum sum of lis[i] + lds[i] - arr[i]\n    max_sum = lis[0] + lds[0] - arr[0]\n    for i in range(1, n):\n        if lis[i] + lds[i] - arr[i] > max_sum:\n            max_sum = lis[i] + lds[i] - arr[i]\n\n    return max_sum"}
{"task_id": "Mbpp/247", "completion": "def lps(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n - 1, -1, -1):\n        dp[i][i] = 1\n        for j in range(i + 1, n):\n            if s[i] == s[j]:\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\n    return dp[0][n - 1]"}
{"task_id": "Mbpp/250", "completion": "def count_X(tup, x):\n    return tup.count(x)"}
{"task_id": "Mbpp/251", "completion": "def insert_element(lst, element):\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result"}
{"task_id": "Mbpp/252", "completion": "import cmath\n\ndef convert(complex_num):\n    return cmath.polar(complex_num)"}
{"task_id": "Mbpp/253", "completion": "def count_integer(lst):\n    count = 0\n    for element in lst:\n        if isinstance(element, int):\n            count += 1\n    return count"}
{"task_id": "Mbpp/255", "completion": "def combinations_colors(lst, n):\n    if n == 0:\n        return [()]\n    else:\n        result = []\n        for i in range(len(lst)):\n            for combo in combinations_colors(lst, n - 1):\n                result.append((lst[i],) + combo)\n        return result"}
{"task_id": "Mbpp/256", "completion": "def count_Primes_nums(n):\n    if n < 2:\n        return 0\n    primes = [True] * n\n    primes[0] = primes[1] = False\n    for i in range(2, int(n**0.5) + 1):\n        if primes[i]:\n            primes[i*i:n:i] = [False] * len(primes[i*i:n:i])\n    return sum(primes)"}
{"task_id": "Mbpp/257", "completion": "def swap_numbers(a, b):\n    return (b, a)"}
{"task_id": "Mbpp/259", "completion": "def maximize_elements(t1, t2):\n    return tuple((max(a, b) for a, b in zip(t1, t2)))"}
{"task_id": "Mbpp/260", "completion": "def newman_prime(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    num = 1\n    while count < n:\n        if is_prime(num) and is_prime(2 * num + 1):\n            count += 1\n        num += 1\n    return num - 1"}
{"task_id": "Mbpp/261", "completion": "def division_elements(t1, t2):\n    return tuple(a / b for a, b in zip(t1, t2))"}
{"task_id": "Mbpp/262", "completion": "def split_two_parts(lst, L):\n    return (lst[:L], lst[L:])"}
{"task_id": "Mbpp/264", "completion": "def dog_age(human_age):\n    if human_age <= 2:\n        return human_age * 10.5\n    else:\n        return 21 + (human_age - 2) * 4"}
{"task_id": "Mbpp/265", "completion": "def list_split(lst, n):\n    return [lst[i::n] for i in range(n)]"}
{"task_id": "Mbpp/266", "completion": "def lateralsurface_cube(side_length):\n    return 4 * side_length * side_length"}
{"task_id": "Mbpp/267", "completion": "def square_Sum(n):\n    return sum([i**2 for i in range(1, 2*n, 2)])"}
{"task_id": "Mbpp/268", "completion": "def find_star_num(n):\n    if n == 1:\n        return 1\n    else:\n        return 6 * (n - 1) + find_star_num(n - 1)"}
{"task_id": "Mbpp/269", "completion": "def ascii_value(char):\n    return ord(char)"}
{"task_id": "Mbpp/270", "completion": "def sum_even_and_even_index(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 == 0)"}
{"task_id": "Mbpp/271", "completion": "def even_Power_Sum(n):\n    return sum([i**5 for i in range(2, 2*n+1, 2)])"}
{"task_id": "Mbpp/272", "completion": "def rear_extract(lst):\n    return [t[-1] for t in lst]"}
{"task_id": "Mbpp/273", "completion": "def substract_elements(t1, t2):\n    return tuple(x - y for x, y in zip(t1, t2))"}
{"task_id": "Mbpp/274", "completion": "def even_binomial_Coeff_Sum(n):\n    def binomialCoeff(n, k):\n        if k > n - k:\n            k = n - k\n        res = 1\n        for i in range(k):\n            res *= (n)\n            res //= (i+1)\n            n -= 1\n        return res\n\n    sum_ = 0\n    for i in range(0, n+1, 2):\n        sum_ += binomialCoeff(n, i)\n    return sum_"}
{"task_id": "Mbpp/276", "completion": "import math\n\ndef volume_cylinder(radius, height):\n    return math.pi * radius**2 * height"}
{"task_id": "Mbpp/277", "completion": "def dict_filter(d, n):\n    return {k: v for k, v in d.items() if v >= n}"}
{"task_id": "Mbpp/278", "completion": "def count_first_elements(t):\n    count = 0\n    for i in t:\n        if isinstance(i, tuple):\n            break\n        count += 1\n    return count"}
{"task_id": "Mbpp/279", "completion": "def is_num_decagonal(n):\n    return n * (4 * n - 3) // 2"}
{"task_id": "Mbpp/280", "completion": "def sequential_search(arr, elem):\n    for i in range(len(arr)):\n        if arr[i] == elem:\n            return (True, i)\n    return (False, -1)"}
{"task_id": "Mbpp/281", "completion": "def all_unique(lst):\n    return len(lst) == len(set(lst))"}
{"task_id": "Mbpp/282", "completion": "def sub_list(list1, list2):\n    return [a - b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/283", "completion": "def validate(n):\n    n = str(n)\n    freq = [0]*10\n    for digit in n:\n        freq[int(digit)] += 1\n    for i in range(10):\n        if freq[i] > i:\n            return False\n    return True"}
{"task_id": "Mbpp/284", "completion": "def check_element(lst, element):\n    return all(item == element for item in lst)"}
{"task_id": "Mbpp/285", "completion": "def text_match_two_three(s):\n    return 'abb' in s or 'abbb' in s"}
{"task_id": "Mbpp/286", "completion": "def max_sub_array_sum_repeated(arr, n, k):\n    # Calculate the sum of the original array\n    original_sum = sum(arr)\n    \n    # Calculate the maximum sum of a non-wrapping subarray in the repeated array\n    max_sum = max(original_sum * k, max_sub_array_sum(arr * 2))\n    \n    return max_sum\n\ndef max_sub_array_sum(arr):\n    max_sum = arr[0]\n    current_sum = arr[0]\n\n    for num in arr[1:]:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum"}
{"task_id": "Mbpp/287", "completion": "def square_Sum(n):\n    return sum([i**2 for i in range(2, 2*n+1, 2)])"}
{"task_id": "Mbpp/290", "completion": "def max_length(list_of_lists):\n    max_len = 0\n    max_list = []\n    for lst in list_of_lists:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_len, max_list"}
{"task_id": "Mbpp/292", "completion": "def find(a, b):\n    return a // b"}
{"task_id": "Mbpp/293", "completion": "import math\n\ndef otherside_rightangle(side1, side2):\n    \"\"\"\n    Function to find the length of the third side of a right-angled triangle\n    given the lengths of the other two sides.\n    \"\"\"\n    return math.sqrt(side1**2 + side2**2)"}
{"task_id": "Mbpp/294", "completion": "def max_val(lst):\n    max_value = None\n    for item in lst:\n        if isinstance(item, (int, float)):\n            if max_value is None or item > max_value:\n                max_value = item\n    return max_value"}
{"task_id": "Mbpp/296", "completion": "def get_Inv_Count(arr):\n    inv_count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count"}
{"task_id": "Mbpp/297", "completion": "def flatten_list(nested_list):\n    result = []\n    for i in nested_list:\n        if isinstance(i, list):\n            result.extend(flatten_list(i))\n        else:\n            result.append(i)\n    return result"}
{"task_id": "Mbpp/299", "completion": "def max_aggregate(lst):\n    aggregate_dict = {}\n    for name, score in lst:\n        if name in aggregate_dict:\n            aggregate_dict[name] += score\n        else:\n            aggregate_dict[name] = score\n    max_name = max(aggregate_dict, key=aggregate_dict.get)\n    return (max_name, aggregate_dict[max_name])"}
{"task_id": "Mbpp/300", "completion": "import math\n\ndef count_binary_seq(n):\n    # Base case\n    if n == 0:\n        return 1\n    \n    # Recursive case\n    return 2 * count_binary_seq(n - 1)"}
{"task_id": "Mbpp/301", "completion": "def dict_depth(d):\n    if not isinstance(d, dict) or not d:\n        return 0\n    else:\n        return 1 + max(dict_depth(v) for v in d.values())"}
{"task_id": "Mbpp/305", "completion": "def start_withp(words):\n    for word in words:\n        if word.startswith('P') or word.startswith('p'):\n            return tuple(word.split())"}
{"task_id": "Mbpp/306", "completion": "def max_sum_increasing_subseq(arr, n, i, k):\n    max_sum = 0\n    for x in range(i+1, k):\n        for y in range(x+1, k):\n            if arr[x] < arr[y]:\n                max_sum = max(max_sum, arr[x] + arr[y])\n    return max_sum"}
{"task_id": "Mbpp/308", "completion": "def large_product(list1, list2, n):\n    list1.sort()\n    list2.sort()\n    return [list1[-1] * list2[-1] for _ in range(n)]"}
{"task_id": "Mbpp/309", "completion": "def maximum(a, b):\n    return a if a > b else b"}
{"task_id": "Mbpp/310", "completion": "def string_to_tuple(s):\n    return tuple(s)"}
{"task_id": "Mbpp/311", "completion": "def set_left_most_unset_bit(n):\n    # Start from the leftmost bit\n    bit = 1 << (n.bit_length() - 1)\n\n    # Keep shifting the bit to the right until we find an unset bit\n    while bit & n:\n        bit >>= 1\n\n    # Set the leftmost unset bit by performing a bitwise OR operation\n    return n | bit"}
{"task_id": "Mbpp/312", "completion": "import math\n\ndef volume_cone(radius, height):\n    return (1/3) * math.pi * radius**2 * height"}
{"task_id": "Mbpp/388", "completion": "def highest_Power_of_2(n):\n    res = 0\n    for i in range(n, 0, -1):\n        if i & (i-1) == 0:\n            res = i\n            break\n    return res"}
{"task_id": "Mbpp/389", "completion": "def find_lucas(n):\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    return find_lucas(n - 1) + find_lucas(n - 2)"}
{"task_id": "Mbpp/390", "completion": "def add_string(lst, fmt):\n    return [fmt.format(i) for i in lst]"}
{"task_id": "Mbpp/391", "completion": "def convert_list_dictionary(keys, values, scores):\n    result = []\n    for i in range(len(keys)):\n        result.append({keys[i]: {values[i]: scores[i]}})\n    return result"}
{"task_id": "Mbpp/392", "completion": "def get_max_sum(n):\n    if n == 0:\n        return 0\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"}
{"task_id": "Mbpp/394", "completion": "def check_distinct(t):\n    return len(t) == len(set(t))"}
{"task_id": "Mbpp/395", "completion": "def first_non_repeating_character(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    return None"}
{"task_id": "Mbpp/397", "completion": "def median_numbers(a, b, c):\n    if a <= b <= c or c <= b <= a:\n        return b\n    elif b <= a <= c or c <= a <= b:\n        return a\n    else:\n        return c"}
{"task_id": "Mbpp/398", "completion": "def sum_of_digits(lst):\n    total = 0\n    for num in lst:\n        total += sum(int(digit) for digit in str(num))\n    return total"}
{"task_id": "Mbpp/404", "completion": "def minimum(a, b):\n    return a if a < b else b"}
{"task_id": "Mbpp/405", "completion": "def check_tuplex(tup, ele):\n    return ele in tup"}
{"task_id": "Mbpp/406", "completion": "def find_Parity(num):\n    return num % 2 != 0"}
{"task_id": "Mbpp/409", "completion": "def min_product_tuple(tuples_list):\n    min_product = float('inf')\n    for tup in tuples_list:\n        product = tup[0] * tup[1]\n        if product < min_product:\n            min_product = product\n    return min_product"}
{"task_id": "Mbpp/410", "completion": "def min_val(lst):\n    # Filter out non-integer elements\n    int_lst = [x for x in lst if isinstance(x, int)]\n    # Return the minimum value\n    return min(int_lst)"}
{"task_id": "Mbpp/412", "completion": "def remove_odd(numbers):\n    return [num for num in numbers if num % 2 == 0]"}
{"task_id": "Mbpp/413", "completion": "def extract_nth_element(lst, n):\n    return [x[n] for x in lst]"}
{"task_id": "Mbpp/414", "completion": "def overlapping(seq1, seq2):\n    for i in seq1:\n        if i in seq2:\n            return True\n    return False"}
{"task_id": "Mbpp/415", "completion": "def max_Product(arr):\n    if len(arr) < 2:\n        return None\n\n    max_product = arr[0] * arr[1]\n    max_pair = (arr[0], arr[1])\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] > max_product:\n                max_product = arr[i] * arr[j]\n                max_pair = (arr[i], arr[j])\n\n    return max_pair"}
{"task_id": "Mbpp/418", "completion": "def Find_Max(lst):\n    max_length = 0\n    max_element = []\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element"}
{"task_id": "Mbpp/419", "completion": "def round_and_sum(numbers):\n    total_sum = sum(round(num) for num in numbers)\n    return total_sum * len(numbers)"}
{"task_id": "Mbpp/420", "completion": "def cube_Sum(n):\n    return sum([i**3 for i in range(2, 2*n + 1, 2)])"}
{"task_id": "Mbpp/421", "completion": "def concatenate_tuple(tup, delimiter='-'):\n    return delimiter.join(str(x) for x in tup)"}
{"task_id": "Mbpp/422", "completion": "def find_Average_Of_Cube(n):\n    total = 0\n    for i in range(1, n+1):\n        total += i**3\n    return total / n"}
{"task_id": "Mbpp/424", "completion": "def extract_rear(tup):\n    return [s[-1] for s in tup]"}
{"task_id": "Mbpp/425", "completion": "def count_element_in_list(lst, element):\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count"}
{"task_id": "Mbpp/426", "completion": "def filter_oddnumbers(numbers):\n    return [num for num in numbers if num % 2 != 0]"}
{"task_id": "Mbpp/427", "completion": "def change_date_format(date):\n    # Split the date string into year, month, and day\n    year, month, day = date.split('-')\n    \n    # Reconstruct the date in dd-mm-yyyy format\n    new_date = f'{day}-{month}-{year}'\n    \n    return new_date"}
{"task_id": "Mbpp/428", "completion": "def shell_sort(arr):\n    gap = len(arr) // 2\n    while gap > 0:\n        for i in range(gap, len(arr)):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr"}
{"task_id": "Mbpp/429", "completion": "def and_tuples(t1, t2):\n    return tuple(a & b for a, b in zip(t1, t2))"}
{"task_id": "Mbpp/430", "completion": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Function to find the directrix of a parabola.\n    \"\"\"\n    return -b/(2*a)"}
{"task_id": "Mbpp/432", "completion": "def median_trapezium(a, b, c):\n    # Calculate the median length of a trapezium\n    return (a + b + c - max(a, b, c) - min(a, b, c)) / 2"}
{"task_id": "Mbpp/433", "completion": "def check_greater(arr, num):\n    for i in arr:\n        if i > num:\n            return False\n    return True"}
{"task_id": "Mbpp/435", "completion": "def last_Digit(num):\n    return num % 10"}
{"task_id": "Mbpp/436", "completion": "def neg_nos(lst):\n    return [x for x in lst if x < 0]"}
{"task_id": "Mbpp/437", "completion": "def remove_odd(s):\n    return s[::2]"}
{"task_id": "Mbpp/439", "completion": "def multiple_to_single(nums):\n    return int(''.join(map(str, nums)))"}
{"task_id": "Mbpp/440", "completion": "import re\n\ndef find_adverb_position(sentence):\n    # Regular expression to find adverbs\n    adverb_pattern = re.compile(r'\\b\\w+ly\\b')\n    \n    # Find all matches of the pattern in the sentence\n    matches = adverb_pattern.finditer(sentence)\n    \n    # Return the position and adverb of the first match\n    for match in matches:\n        return (match.start(), match.end(), match.group())"}
{"task_id": "Mbpp/441", "completion": "def surfacearea_cube(size):\n    return 6 * size * size"}
{"task_id": "Mbpp/445", "completion": "def index_multiplication(t1, t2):\n    return tuple((x*y for x, y in zip(t1, t2)))"}
{"task_id": "Mbpp/446", "completion": "def count_Occurrence(tup, lst):\n    count = 0\n    for item in tup:\n        if item in lst:\n            count += 1\n    return count"}
{"task_id": "Mbpp/447", "completion": "def cube_nums(nums):\n    return [num**3 for num in nums]"}
{"task_id": "Mbpp/448", "completion": "def cal_sum(n):\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return cal_sum(n-2) + cal_sum(n-3)"}
{"task_id": "Mbpp/450", "completion": "def extract_string(lst, size):\n    return [s for s in lst if len(s) == size]"}
{"task_id": "Mbpp/451", "completion": "def remove_whitespaces(s):\n    return s.replace(\" \", \"\")"}
{"task_id": "Mbpp/453", "completion": "def sumofFactors(n):\n    sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"}
{"task_id": "Mbpp/454", "completion": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/455", "completion": "def check_monthnumb_number(month_number):\n    # List of months with 31 days\n    months_31_days = [1, 3, 5, 7, 8, 10, 12]\n    \n    # Check if the month number is in the list\n    if month_number in months_31_days:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/456", "completion": "def reverse_string_list(lst):\n    return [s[::-1] for s in lst]"}
{"task_id": "Mbpp/457", "completion": "def Find_Min(lst):\n    return min(lst, key=len)"}
{"task_id": "Mbpp/458", "completion": "def rectangle_area(length, width):\n    return length * width"}
{"task_id": "Mbpp/459", "completion": "def remove_uppercase(s):\n    result = \"\"\n    for char in s:\n        if not char.isupper():\n            result += char\n    return result"}
{"task_id": "Mbpp/460", "completion": "def Extract(lst):\n    return [sublist[0] for sublist in lst]"}
{"task_id": "Mbpp/462", "completion": "def combinations_list(lst):\n    result = [[]]\n    for item in lst:\n        result += [i + [item] for i in result]\n    return result"}
{"task_id": "Mbpp/463", "completion": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n\n        result = max(result, max_product)\n\n    return result"}
{"task_id": "Mbpp/465", "completion": "def drop_empty(d):\n    return {k: v for k, v in d.items() if v is not None}"}
{"task_id": "Mbpp/468", "completion": "def max_product(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    max_product = [0] * n\n    max_product[0] = arr[0]\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                max_product[i] = max(max_product[i], max_product[j] * arr[i])\n            else:\n                max_product[i] = max(max_product[i], arr[i])\n    return max(max_product)"}
{"task_id": "Mbpp/470", "completion": "def add_pairwise(tup):\n    return tuple(tup[i] + tup[i+1] for i in range(len(tup)-1))"}
{"task_id": "Mbpp/471", "completion": "def find_remainder(arr, n):\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"}
{"task_id": "Mbpp/472", "completion": "def check_Consecutive(lst):\n    return sorted(lst) == list(range(min(lst), max(lst)+1))"}
{"task_id": "Mbpp/473", "completion": "def tuple_intersection(t1, t2):\n    # Convert each tuple in the list to a set and store them in a new list\n    t1_sets = [set(t) for t in t1]\n    t2_sets = [set(t) for t in t2]\n\n    # Find the intersection of the sets\n    intersection = set.intersection(*t1_sets, *t2_sets)\n\n    # Convert the sets back to tuples and return the result\n    return {tuple(s) for s in intersection}"}
{"task_id": "Mbpp/474", "completion": "def replace_char(s, old, new):\n    return s.replace(old, new)"}
{"task_id": "Mbpp/475", "completion": "def sort_counter(d):\n    return sorted(d.items(), key=lambda x: x[1], reverse=True)"}
{"task_id": "Mbpp/476", "completion": "def big_sum(arr):\n    if not arr:  # Check if the array is empty\n        return 0\n    return max(arr) + min(arr)"}
{"task_id": "Mbpp/477", "completion": "def is_lower(s):\n    return s.lower()"}
{"task_id": "Mbpp/478", "completion": "def remove_lowercase(s):\n    result = \"\"\n    for char in s:\n        if char.isupper():\n            result += char\n    return result"}
{"task_id": "Mbpp/479", "completion": "def first_Digit(num):\n    while num >= 10:\n        num //= 10\n    return num"}
{"task_id": "Mbpp/554", "completion": "def Split(lst):\n    return [x for x in lst if x % 2 != 0]"}
{"task_id": "Mbpp/555", "completion": "def difference(n):\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_numbers = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_numbers"}
{"task_id": "Mbpp/556", "completion": "def find_Odd_Pair(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (arr[i] ^ arr[j]) % 2 != 0:\n                count += 1\n    return count"}
{"task_id": "Mbpp/557", "completion": "def toggle_string(s):\n    return s.swapcase()"}
{"task_id": "Mbpp/558", "completion": "def digit_distance_nums(num1, num2):\n    # Convert the numbers to strings\n    str1 = str(num1)\n    str2 = str(num2)\n\n    # Make both strings the same length by adding leading zeros\n    max_length = max(len(str1), len(str2))\n    str1 = str1.zfill(max_length)\n    str2 = str2.zfill(max_length)\n\n    # Calculate the sum of the per-digit difference\n    return sum(abs(int(a) - int(b)) for a, b in zip(str1, str2))"}
{"task_id": "Mbpp/559", "completion": "def max_sub_array_sum(arr, n):\n    max_so_far = arr[0]\n    curr_max = arr[0]\n\n    for i in range(1, n):\n        curr_max = max(arr[i], curr_max + arr[i])\n        max_so_far = max(max_so_far, curr_max)\n\n    return max_so_far"}
{"task_id": "Mbpp/560", "completion": "def union_elements(t1, t2):\n    # Combine the two tuples and convert to a set to remove duplicates\n    combined_set = set(t1 + t2)\n    # Convert the set back to a tuple and sort it\n    sorted_tuple = tuple(sorted(combined_set))\n    return sorted_tuple"}
{"task_id": "Mbpp/562", "completion": "def Find_Max_Length(lst):\n    max_length = 0\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length"}
{"task_id": "Mbpp/563", "completion": "def extract_values(s):\n    return [x.strip('\\\"') for x in s.split(',')]"}
{"task_id": "Mbpp/564", "completion": "def count_Pairs(lst, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if lst[i] != lst[j]:\n                count += 1\n    return count"}
{"task_id": "Mbpp/565", "completion": "def split(s):\n    return list(s)"}
{"task_id": "Mbpp/566", "completion": "def sum_digits(n):\n    return sum(int(digit) for digit in str(n))"}
{"task_id": "Mbpp/567", "completion": "def issort_list(lst):\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))"}
{"task_id": "Mbpp/568", "completion": "def empty_list(n):\n    return [{} for _ in range(n)]"}
{"task_id": "Mbpp/569", "completion": "def sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]"}
{"task_id": "Mbpp/572", "completion": "def remove_duplicates(nums):\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n\ndef two_unique_nums(nums):\n    unique_nums = remove_duplicates(nums)\n    return unique_nums"}
{"task_id": "Mbpp/573", "completion": "def unique_product(lst):\n    unique_nums = set(lst)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"}
{"task_id": "Mbpp/576", "completion": "def is_Sub_Array(list1, list2):\n    if len(list2) > len(list1):\n        return False\n    for i in range(len(list1) - len(list2) + 1):\n        if list1[i:i+len(list2)] == list2:\n            return True\n    return False"}
{"task_id": "Mbpp/577", "completion": "def last_Digit_Factorial(n):\n    if n < 0:\n        return \"Invalid input\"\n    elif n == 0 or n == 1:\n        return 1\n    else:\n        factorial = 1\n        for i in range(2, n + 1):\n            factorial *= i\n        return factorial % 10"}
{"task_id": "Mbpp/578", "completion": "def interleave_lists(list1, list2, list3):\n    interleaved_list = []\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    return interleaved_list"}
{"task_id": "Mbpp/579", "completion": "def find_dissimilar(t1, t2):\n    set1 = set(t1)\n    set2 = set(t2)\n    dissimilar_elements = set1.symmetric_difference(set2)\n    return tuple(sorted(dissimilar_elements))"}
{"task_id": "Mbpp/580", "completion": "def extract_even(t):\n    if isinstance(t, tuple):\n        return tuple(extract_even(x) for x in t if isinstance(x, tuple) or x % 2 == 0)\n    else:\n        return t if t % 2 == 0 else ()"}
{"task_id": "Mbpp/581", "completion": "def surface_Area(base_edge, height):\n    base_area = base_edge ** 2\n    slant_height = (base_edge / 2) ** 2 + height ** 2\n    slant_height = slant_height ** 0.5\n    lateral_area = base_edge * slant_height / 2\n    total_surface_area = base_area + lateral_area * 4\n    return total_surface_area"}
{"task_id": "Mbpp/583", "completion": "def catalan_number(n):\n    if n <= 1:\n        return 1\n    res = 0\n    for i in range(n):\n        res += catalan_number(i) * catalan_number(n-i-1)\n    return res"}
{"task_id": "Mbpp/585", "completion": "def expensive_items(items, n):\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]"}
{"task_id": "Mbpp/586", "completion": "def split_Arr(arr, n):\n    return arr[n:] + arr[:n]"}
{"task_id": "Mbpp/587", "completion": "def list_tuple(lst):\n    return tuple(lst)"}
{"task_id": "Mbpp/588", "completion": "def big_diff(lst):\n    return max(lst) - min(lst)"}
{"task_id": "Mbpp/589", "completion": "def perfect_squares(start, end):\n    \"\"\"\n    This function finds all the perfect squares between two given numbers.\n    \"\"\"\n    squares = []\n    for i in range(start, end+1):\n        root = i ** 0.5\n        if int(root + 0.5) ** 2 == i:\n            squares.append(i)\n    return squares"}
{"task_id": "Mbpp/590", "completion": "import cmath\n\ndef polar_rect(r, theta):\n    real = r * cmath.cos(theta)\n    imag = r * cmath.sin(theta)\n    return (real, imag)"}
{"task_id": "Mbpp/591", "completion": "def swap_List(lst):\n    lst[0], lst[-1] = lst[-1], lst[0]\n    return lst"}
{"task_id": "Mbpp/592", "completion": "def sum_Of_product(n):\n    from math import comb\n    return sum(comb(n, i) * comb(n, i+1) for i in range(n))"}
{"task_id": "Mbpp/593", "completion": "def removezero_ip(ip):\n    # Split the ip address into its components\n    ip_components = ip.split(\".\")\n    \n    # Remove leading zeroes from each component\n    ip_components = [str(int(component)) for component in ip_components]\n    \n    # Join the components back together with periods\n    return \".\".join(ip_components)"}
{"task_id": "Mbpp/594", "completion": "def diff_even_odd(lst):\n    even = None\n    odd = None\n    for num in lst:\n        if num % 2 == 0:\n            even = num\n            break\n    for num in lst:\n        if num % 2 != 0:\n            odd = num\n            break\n    if even is None or odd is None:\n        return None\n    return even - odd"}
{"task_id": "Mbpp/596", "completion": "import sys\n\ndef tuple_size(t):\n    \"\"\"\n    Returns the size in bytes of the given tuple.\n    \"\"\"\n    return sys.getsizeof(t)"}
{"task_id": "Mbpp/597", "completion": "def find_kth(arr1, arr2, k):\n    if len(arr1) + len(arr2) < k:\n        return None\n\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return arr1[i]\n            i += 1\n        else:\n            if k == 1:\n                return arr2[j]\n            j += 1\n        k -= 1\n\n    while i < len(arr1):\n        if k == 1:\n            return arr1[i]\n        i += 1\n        k -= 1\n\n    while j < len(arr2):\n        if k == 1:\n            return arr2[j]\n        j += 1\n        k -= 1\n\n    return None"}
{"task_id": "Mbpp/598", "completion": "def armstrong_number(num):\n    # convert number to string to get length\n    num_str = str(num)\n    length = len(num_str)\n\n    # calculate the sum of the powers of each digit\n    total = 0\n    for digit in num_str:\n        total += int(digit) ** length\n\n    # check if the sum is equal to the original number\n    return total == num\n\n# test the function"}
{"task_id": "Mbpp/599", "completion": "def sum_average(n):\n    sum_n = n * (n + 1) // 2\n    avg_n = sum_n / n\n    return sum_n, avg_n"}
{"task_id": "Mbpp/600", "completion": "def is_Even(n):\n    return n % 2 == 0"}
{"task_id": "Mbpp/602", "completion": "def first_repeated_char(s):\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None"}
{"task_id": "Mbpp/603", "completion": "def get_ludic(n):\n    ludics = []\n    for i in range(1, n+1):\n        count = 0\n        for j in range(1, i+1):\n            if i % j == 0:\n                count += 1\n        if count % 2 == 1:\n            ludics.append(i)\n    return ludics"}
{"task_id": "Mbpp/604", "completion": "def reverse_words(s):\n    return ' '.join(s.split()[::-1])"}
{"task_id": "Mbpp/605", "completion": "def prime_num(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/606", "completion": "import math\n\ndef radian_degree(degrees):\n    return math.radians(degrees)"}
{"task_id": "Mbpp/607", "completion": "import re\n\ndef find_literals(s, pattern):\n    match = re.search(pattern, s)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"}
{"task_id": "Mbpp/608", "completion": "def bell_Number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        # Explicitly set the first value of current row as\n        # last value of previous row\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]"}
{"task_id": "Mbpp/610", "completion": "def remove_kth_element(lst, k):\n    return lst[:k] + lst[k+1:]"}
{"task_id": "Mbpp/611", "completion": "def max_of_nth(matrix, n):\n    return max(row[n] for row in matrix)"}
{"task_id": "Mbpp/612", "completion": "def merge(lst):\n    first_elements = [sublist[0] for sublist in lst]\n    second_elements = [sublist[1] for sublist in lst]\n    return [first_elements, second_elements]"}
{"task_id": "Mbpp/614", "completion": "def cummulative_sum(tuple_list):\n    total_sum = 0\n    for tup in tuple_list:\n        total_sum += sum(tup)\n    return total_sum"}
{"task_id": "Mbpp/615", "completion": "def average_tuple(tuples):\n    return [sum(t) / len(t) for t in tuples]"}
{"task_id": "Mbpp/616", "completion": "def tuple_modulo(t1, t2):\n    return tuple(a % b for a, b in zip(t1, t2))"}
{"task_id": "Mbpp/618", "completion": "def div_list(list1, list2):\n    return [a / b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/619", "completion": "def move_num(s):\n    nums = [char for char in s if char.isdigit()]\n    letters = [char for char in s if not char.isdigit()]\n    return ''.join(letters + nums)"}
{"task_id": "Mbpp/620", "completion": "def largest_subset(nums):\n    if not nums:\n        return 0\n\n    nums.sort()\n    n = len(nums)\n    dp = [1] * n\n\n    for i in range(1, n):\n        for j in range(i):\n            if nums[i] % nums[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n\n    return max(dp)"}
{"task_id": "Mbpp/622", "completion": "def get_median(arr1, arr2, n):\n    i = 0\n    j = 0\n    m1 = -1\n    m2 = -1\n\n    for count in range(n + 1):\n        if i == n:\n            m1 = m2\n            m2 = arr2[0]\n            break\n        elif j == n:\n            m1 = m2\n            m2 = arr1[0]\n            break\n\n        if arr1[i] <= arr2[j]:\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n\n    return (m1 + m2) / 2.0"}
{"task_id": "Mbpp/623", "completion": "def nth_nums(nums, n):\n    return [num**n for num in nums]"}
{"task_id": "Mbpp/624", "completion": "def is_upper(s):\n    return s.upper()"}
{"task_id": "Mbpp/626", "completion": "import math\n\ndef triangle_area(radius):\n    if radius < 0:\n        return None\n    else:\n        return (radius ** 2) * (math.pi / 2)"}
{"task_id": "Mbpp/628", "completion": "def replace_spaces(s):\n    return s.replace(' ', '%20')"}
{"task_id": "Mbpp/629", "completion": "def Split(numbers):\n    return [num for num in numbers if num % 2 == 0]"}
{"task_id": "Mbpp/630", "completion": "def get_coordinates(coord):\n    x, y = coord\n    adjacent_coords = []\n    for i in range(x-1, x+2):\n        for j in range(y-1, y+2):\n            if (i, j) != (x, y):\n                adjacent_coords.append([i, j])\n    return adjacent_coords"}
{"task_id": "Mbpp/631", "completion": "def replace_spaces(s):\n    return s.replace(' ', '_') if ' ' in s else s.replace('_', ' ')"}
{"task_id": "Mbpp/632", "completion": "def move_zero(nums):\n    non_zero = [num for num in nums if num != 0]\n    zero_count = nums.count(0)\n    non_zero.extend([0] * zero_count)\n    return non_zero"}
{"task_id": "Mbpp/633", "completion": "def pair_xor_Sum(lst, n):\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += lst[i] ^ lst[j]\n    return xor_sum"}
{"task_id": "Mbpp/635", "completion": "def heapify(arr, n, i):\n    largest = i\n    l = 2 * i + 1\n    r = 2 * i + 2\n\n    if l < n and arr[i] < arr[l]:\n        largest = l\n\n    if r < n and arr[largest] < arr[r]:\n        largest = r\n\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\n\ndef heap_sort(arr):\n    n = len(arr)\n\n    for i in range(n, -1, -1):\n        heapify(arr, n, i)\n\n    for i in range(n-1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n\n    return arr"}
{"task_id": "Mbpp/637", "completion": "def noprofit_noloss(sell_price, buy_price):\n    if sell_price > buy_price:\n        return False\n    else:\n        return True"}
{"task_id": "Mbpp/638", "completion": "def wind_chill(velocity, temperature):\n    # Check if inputs are valid\n    if velocity < 0 or temperature > 50:\n        raise ValueError(\"Invalid inputs. Velocity must be non-negative and temperature must be less than or equal to 50.\")\n\n    # Calculate wind chill index\n    wind_chill_index = 13.12 + 0.6215*temperature -  11.37*(velocity**0.16) + 0.3965*temperature*(velocity**0.16)\n\n    # Round to the next integer\n    return round(wind_chill_index)"}
{"task_id": "Mbpp/639", "completion": "def sample_nam(names):\n    return sum(len(name) for name in names if name[0].isupper())"}
{"task_id": "Mbpp/641", "completion": "def is_nonagonal(n):\n    return n * (7 * n - 5) // 2"}
{"task_id": "Mbpp/643", "completion": "def text_match_wordz_middle(s):\n    return 'z' in s[1:-1]"}
{"task_id": "Mbpp/644", "completion": "def reverse_Array_Upto_K(arr, k):\n    # Reverse the array upto position k\n    arr[:k] = arr[:k][::-1]\n    return arr"}
{"task_id": "Mbpp/720", "completion": "def add_dict_to_tuple(tup, dictionary):\n    return tup + (dictionary,)"}
{"task_id": "Mbpp/721", "completion": "def maxAverageOfPath(matrix):\n    n = len(matrix)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = matrix[0][0]\n\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n        dp[0][i] = dp[0][i-1] + matrix[0][i]\n\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j]\n\n    total_cost = dp[n-1][n-1]\n    num_cells = n * n\n    return total_cost / num_cells"}
{"task_id": "Mbpp/722", "completion": "def filter_data(data, min_height, min_weight):\n    return {k: v for k, v in data.items() if v[0] >= min_height and v[1] >= min_weight}"}
{"task_id": "Mbpp/723", "completion": "def count_same_pair(list1, list2):\n    return sum(1 for i in range(len(list1)) if list1[i] == list2[i])"}
{"task_id": "Mbpp/724", "completion": "def power_base_sum(base, power):\n    result = base ** power\n    return sum(int(digit) for digit in str(result))"}
{"task_id": "Mbpp/725", "completion": "def extract_quotation(s):\n    import re\n    return re.findall(r'\"(.*?)\"', s)"}
{"task_id": "Mbpp/726", "completion": "def multiply_elements(t):\n    return tuple(t[i] * t[i+1] for i in range(len(t)-1))"}
{"task_id": "Mbpp/728", "completion": "def sum_list(list1, list2):\n    return [a + b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/730", "completion": "def consecutive_duplicates(lst):\n    result = []\n    for i in lst:\n        if not result or i != result[-1]:\n            result.append(i)\n    return result"}
{"task_id": "Mbpp/731", "completion": "import math\n\ndef lateralsurface_cone(r, h):\n    return math.pi * r * math.sqrt(r**2 + h**2)"}
{"task_id": "Mbpp/732", "completion": "def replace_specialchar(s):\n    return s.replace(' ', ':').replace(',', ':').replace('.', ':')"}
{"task_id": "Mbpp/733", "completion": "def find_first_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1  # look for first occurrence on the left\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result"}
{"task_id": "Mbpp/734", "completion": "def sum_Of_Subarray_Prod(lst):\n    n = len(lst)\n    total_sum = 0\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= lst[j]\n            total_sum += product\n    return total_sum"}
{"task_id": "Mbpp/735", "completion": "def toggle_middle_bits(n):\n    # Convert the number to binary\n    binary = bin(n)[2:]\n\n    # Toggle the middle bits\n    middle_bits = binary[1:-1]\n    toggled_middle_bits = ''.join('1' if bit == '0' else '0' for bit in middle_bits)\n\n    # Reconstruct the number\n    new_binary = binary[0] + toggled_middle_bits + binary[-1]\n    new_number = int(new_binary, 2)\n\n    return new_number"}
{"task_id": "Mbpp/736", "completion": "def left_insertion(arr, val):\n    for i, num in enumerate(arr):\n        if num >= val:\n            return i\n    return len(arr)"}
{"task_id": "Mbpp/737", "completion": "import re\n\ndef check_str(s):\n    return bool(re.match(r'^[aeiouAEIOU]', s))"}
{"task_id": "Mbpp/739", "completion": "def find_Index(n):\n    i = 1\n    while True:\n        triangular_number = i * (i + 1) // 2\n        if len(str(triangular_number)) >= n:\n            return i\n        i += 1"}
{"task_id": "Mbpp/740", "completion": "def tuple_to_dict(t):\n    return {t[i]: t[i + 1] for i in range(0, len(t), 2)}"}
{"task_id": "Mbpp/741", "completion": "def all_Characters_Same(s):\n    if len(s) == 0:\n        return True\n    else:\n        first_char = s[0]\n        for char in s:\n            if char != first_char:\n                return False\n        return True"}
{"task_id": "Mbpp/742", "completion": "import math\n\ndef area_tetrahedron(side):\n    return math.sqrt(3) * side ** 2"}
{"task_id": "Mbpp/743", "completion": "def rotate_right(lst, n):\n    \"\"\"\n    Rotate the given list to the right by n items\n    \"\"\"\n    return lst[-n:] + lst[:-n]"}
{"task_id": "Mbpp/744", "completion": "def check_none(tup):\n    return any(item is None for item in tup)"}
{"task_id": "Mbpp/745", "completion": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        str_num = str(num)\n        if all(int(digit) != 0 and num % int(digit) == 0 for digit in str_num):\n            result.append(num)\n    return result"}
{"task_id": "Mbpp/748", "completion": "def capital_words_spaces(s):\n    words = []\n    start = 0\n    for i in range(1, len(s)):\n        if s[i].isupper():\n            words.append(s[start:i])\n            start = i\n    words.append(s[start:])\n    return ' '.join(words)"}
{"task_id": "Mbpp/749", "completion": "def sort_numeric_strings(lst):\n    return sorted(lst, key=int)"}
{"task_id": "Mbpp/750", "completion": "def add_tuple(lst, tpl):\n    return lst + list(tpl)"}
{"task_id": "Mbpp/751", "completion": "def check_min_heap(arr):\n    n = len(arr)\n    for i in range(n // 2):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[i] > arr[left]:\n            return False\n        if right < n and arr[i] > arr[right]:\n            return False\n    return True"}
{"task_id": "Mbpp/752", "completion": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * jacobsthal_num(n-1) + jacobsthal_num(n-2)"}
{"task_id": "Mbpp/753", "completion": "def min_k(tuple_list, k):\n    sorted_list = sorted(tuple_list, key=lambda x: x[1])\n    return sorted_list[:k]"}
{"task_id": "Mbpp/754", "completion": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(min(len(l1), len(l2), len(l3))):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"}
{"task_id": "Mbpp/755", "completion": "def second_smallest(numbers):\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n    return second_smallest"}
{"task_id": "Mbpp/757", "completion": "def count_reverse_pairs(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] == lst[j][::-1]:\n                count += 1\n    return count"}
{"task_id": "Mbpp/758", "completion": "def unique_sublists(lst):\n    result = {}\n    for sublist in lst:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in result:\n            result[sublist_tuple] += 1\n        else:\n            result[sublist_tuple] = 1\n    return result"}
{"task_id": "Mbpp/759", "completion": "def is_decimal(s):\n    try:\n        float(s)\n        if s.count('.') == 1:\n            if len(s.split('.')[1]) == 2:\n                return True\n        return False\n    except ValueError:\n        return False"}
{"task_id": "Mbpp/760", "completion": "def unique_Element(lst):\n    return len(set(lst)) == 1"}
{"task_id": "Mbpp/762", "completion": "def check_monthnumber_number(month_number):\n    # List of months with 30 days\n    thirty_days_months = [4, 6, 9, 11]\n    \n    # Check if the month number is in the list\n    if month_number in thirty_days_months:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/763", "completion": "def find_min_diff(arr, n):\n    # Sort the array\n    arr.sort()\n    \n    # Initialize minimum difference\n    min_diff = float('inf')\n    \n    # Traverse the array\n    for i in range(1, n):\n        diff = arr[i] - arr[i-1]\n        if diff < min_diff:\n            min_diff = diff\n    \n    return min_diff"}
{"task_id": "Mbpp/764", "completion": "def number_ctr(s):\n    return sum(c.isdigit() for c in s)"}
{"task_id": "Mbpp/765", "completion": "def is_polite(n):\n    count = 0\n    num = 0\n    while count < n:\n        num += 1\n        if bin(num).count('1') % 2 == 0:\n            count += 1\n    return num"}
{"task_id": "Mbpp/766", "completion": "def pair_wise(lst):\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]"}
{"task_id": "Mbpp/767", "completion": "def get_pairs_count(arr, sum):\n    count = 0\n    n = len(arr)\n    for i in range(0, n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"}
{"task_id": "Mbpp/769", "completion": "def Diff(li1, li2): \n    return list(set(li1) - set(li2))"}
{"task_id": "Mbpp/770", "completion": "def odd_num_sum(n):\n    return sum([i**4 for i in range(1, 2*n, 2)])"}
{"task_id": "Mbpp/771", "completion": "def check_expression(expression):\n    stack = []\n    opening_brackets = ['(', '[', '{']\n    closing_brackets = [')', ']', '}']\n    bracket_pairs = {')': '(', ']': '[', '}': '{'}\n\n    for char in expression:\n        if char in opening_brackets:\n            stack.append(char)\n        elif char in closing_brackets:\n            if not stack or stack.pop() != bracket_pairs[char]:\n                return False\n\n    return not stack"}
{"task_id": "Mbpp/772", "completion": "def remove_length(s, k):\n    words = s.split()\n    return ' '.join(word for word in words if len(word) != k)"}
{"task_id": "Mbpp/773", "completion": "def occurance_substring(string, substring):\n    index = string.find(substring)\n    if index != -1:\n        return substring, index, index + len(substring)\n    else:\n        return None"}
{"task_id": "Mbpp/775", "completion": "def odd_position(lst):\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/777", "completion": "def find_sum(lst):\n    # Create a dictionary to store the count of each element\n    count_dict = {}\n    for num in lst:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    # Find the sum of non-repeated elements\n    sum_non_repeated = 0\n    for num, count in count_dict.items():\n        if count == 1:\n            sum_non_repeated += num\n\n    return sum_non_repeated"}
{"task_id": "Mbpp/778", "completion": "def pack_consecutive_duplicates(lst):\n    packed = []\n    for i in range(len(lst)):\n        if i == 0 or lst[i] != lst[i-1]:\n            packed.append([lst[i]])\n        else:\n            packed[-1].append(lst[i])\n    return packed"}
{"task_id": "Mbpp/780", "completion": "def find_combinations(tuple_list):\n    combinations = []\n    for i in range(len(tuple_list)):\n        for j in range(i+1, len(tuple_list)):\n            combinations.append((tuple_list[i][0] + tuple_list[j][0], tuple_list[i][1] + tuple_list[j][1]))\n            combinations.append((tuple_list[i][0] + tuple_list[j][1], tuple_list[i][1] + tuple_list[j][0]))\n    return combinations"}
{"task_id": "Mbpp/781", "completion": "def count_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0"}
{"task_id": "Mbpp/782", "completion": "def odd_length_sum(arr):\n    total_sum = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i, n, 2):\n            total_sum += sum(arr[i:j+1])\n    return total_sum"}
{"task_id": "Mbpp/784", "completion": "def mul_even_odd(lst):\n    even_num = None\n    odd_num = None\n    for num in lst:\n        if num % 2 == 0:\n            even_num = num\n            break\n    for num in lst:\n        if num % 2 != 0:\n            odd_num = num\n            break\n    if even_num is not None and odd_num is not None:\n        return even_num * odd_num\n    else:\n        return None"}
{"task_id": "Mbpp/785", "completion": "def tuple_str_int(tuple_str):\n    # Remove the parentheses\n    tuple_str = tuple_str.strip(\"()\")\n    # Split the string into a list of strings\n    str_list = tuple_str.split(\", \")\n    # Convert each string to an integer and create a tuple\n    int_tuple = tuple(map(int, str_list))\n    return int_tuple"}
{"task_id": "Mbpp/786", "completion": "def right_insertion(sorted_list, value):\n    for i, num in enumerate(sorted_list):\n        if num > value:\n            return i\n    return len(sorted_list)"}
{"task_id": "Mbpp/787", "completion": "import re\n\ndef text_match_three(s):\n    pattern = 'ab{3}$'\n    if re.search(pattern, s):\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/788", "completion": "def new_tuple(list_val, str_val):\n    list_val.append(str_val)\n    return tuple(list_val)"}
{"task_id": "Mbpp/790", "completion": "def even_position(lst):\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            return False\n    return True"}
{"task_id": "Mbpp/791", "completion": "def remove_nested(tup):\n    result = []\n    for i in tup:\n        if isinstance(i, tuple):\n            continue\n        result.append(i)\n    return tuple(result)"}
{"task_id": "Mbpp/792", "completion": "def count_list(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, list):\n            count += 1\n    return count"}
{"task_id": "Mbpp/793", "completion": "def last(arr, x):\n    low = 0\n    high = len(arr) - 1\n    res = -1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] < x:\n            low = mid + 1\n        elif arr[mid] > x:\n            high = mid - 1\n        else:\n            res = mid\n            low = mid + 1\n\n    return res"}
{"task_id": "Mbpp/794", "completion": "def text_starta_endb(s):\n    return s.startswith('a') and s.endswith('b')"}
{"task_id": "Mbpp/796", "completion": "def return_sum(dictionary):\n    return sum(dictionary.values())"}
{"task_id": "Mbpp/797", "completion": "def sum_in_range(l, r):\n    return sum(i for i in range(l, r+1) if i % 2 != 0)"}
{"task_id": "Mbpp/798", "completion": "def _sum(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total"}
{"task_id": "Mbpp/799", "completion": "def left_rotate(n, d):\n    return (n << d)|(n >> (32 - d))"}
{"task_id": "Mbpp/800", "completion": "def remove_all_spaces(s):\n    return s.replace(\" \", \"\")"}
{"task_id": "Mbpp/801", "completion": "def test_three_equal(a, b, c):\n    if a == b == c:\n        return 3\n    elif a == b or a == c or b == c:\n        return 2\n    else:\n        return 0"}
{"task_id": "Mbpp/803", "completion": "def is_perfect_square(num):\n    if num < 0:\n        return False\n    root = int(num ** 0.5)\n    return root * root == num"}
{"task_id": "Mbpp/804", "completion": "def is_product_even(lst):\n    product = 1\n    for num in lst:\n        product *= num\n    return product % 2 == 0"}
{"task_id": "Mbpp/805", "completion": "def max_sum_list(list_of_lists):\n    max_sum = float('-inf')\n    max_list = []\n    for lst in list_of_lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_list = lst\n    return max_list"}
{"task_id": "Mbpp/806", "completion": "def max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n    for char in s:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run"}
{"task_id": "Mbpp/807", "completion": "def first_odd(numbers):\n    for num in numbers:\n        if num % 2 != 0:\n            return num\n    return None"}
{"task_id": "Mbpp/808", "completion": "def check_K(tup, k):\n    return k in tup"}
{"task_id": "Mbpp/809", "completion": "def check_smaller(t1, t2):\n    for i in range(len(t1)):\n        if t1[i] <= t2[i]:\n            return False\n    return True"}
