{"task_id": "Mbpp/2", "completion": "def similar_elements(list1, list2):\n    return set(list1).intersection(list2)"}
{"task_id": "Mbpp/3", "completion": "def is_not_prime(n):\n    if n <= 1:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False"}
{"task_id": "Mbpp/4", "completion": "import heapq\n\ndef heap_queue_largest(nums, n):\n    # Use heapq to create a min heap\n    min_heap = [-num for num in nums]\n    heapq.heapify(min_heap)\n\n    # Pop the top n elements from the heap\n    result = []\n    for _ in range(n):\n        result.append(-heapq.heappop(min_heap))\n\n    return result"}
{"task_id": "Mbpp/6", "completion": "def differ_At_One_Bit_Pos(a, b):\n    xor_result = a ^ b\n    count_of_set_bits = bin(xor_result).count('1')\n    return count_of_set_bits == 1"}
{"task_id": "Mbpp/7", "completion": "def find_char_long(s):\n    words = s.split()\n    return [word for word in words if len(word) >= 4]"}
{"task_id": "Mbpp/8", "completion": "def square_nums(lst):\n    return [i**2 for i in lst]"}
{"task_id": "Mbpp/9", "completion": "def find_Rotations(s):\n    if len(s) == 0:\n        return 0\n    for i in range(len(s)):\n        rotated_string = s[i:] + s[:i]\n        if rotated_string == s:\n            return i + 1\n    return len(s)"}
{"task_id": "Mbpp/11", "completion": "def remove_Occ(s, char):\n    first = s.find(char)\n    last = s.rfind(char)\n    if first == -1 or last == -1:\n        return s\n    else:\n        return s[:first] + s[first+1:last] + s[last+1:]"}
{"task_id": "Mbpp/12", "completion": "def sort_matrix(matrix):\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in matrix]\n    \n    # Sort the matrix based on the row sums\n    sorted_matrix = [row for _, row in sorted(zip(row_sums, matrix))]\n    \n    return sorted_matrix"}
{"task_id": "Mbpp/14", "completion": "def find_Volume(a, b, c):\n    s = (a + b + c) / 2\n    return (s*(s-a)*(s-b)*(s-c)) ** 0.5"}
{"task_id": "Mbpp/16", "completion": "def text_lowercase_underscore(s):\n    return all(c.islower() or c == '_' for c in s)"}
{"task_id": "Mbpp/17", "completion": "def square_perimeter(side_length):\n    return side_length * 4"}
{"task_id": "Mbpp/18", "completion": "def remove_dirty_chars(str1, str2):\n    for char in str2:\n        str1 = str1.replace(char, '')\n    return str1"}
{"task_id": "Mbpp/19", "completion": "def test_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "Mbpp/20", "completion": "# Check if the number is a multiple of 10\n    if num % 10 != 0:\n        return False\n    \n    # Check if the number is a multiple of 11\n    if num % 11 != 0:\n        return False\n    \n    # Check if the number is a multiple of 12\n    if num % 12 != 0:\n        return False\n    \n    # Check if the number is a multiple of 13\n    if num % 13 != 0:\n        return False\n    \n    # Check if the number is a multiple of 14\n    if num % 14 != 0:\n        return False\n    \n    # Check if the number is a multiple of 15\n    if num % 15 != 0:\n        return False\n    \n    # Check if the number is a multiple of 16\n    if num % 16 != 0:\n        return False\n    \n    # Check if the number is a multiple of 17\n    if num % 17 != 0:\n        return False\n    \n    # Check if the number is a multiple of 18\n    if num % 18 != 0:\n        return False\n    \n    # Check if the number is a multiple of 19\n    if num % 19 != 0:\n        return False\n    \n    # Check if the number is a multiple of 20\n    if num % 20 != 0:\n        return False\n    \n    # Check if the number is a multiple of 21\n    if num % 21 != 0:\n        return False\n    \n    # Check if the number is a multiple of 22\n    if num % 22 != 0:\n        return False\n    \n    # Check if the number is a multiple of 23\n    if num % 23 != 0:\n        return False\n    \n    # Check if the number is a multiple of 24\n    if num % 24 != 0:\n        return False\n    \n    # Check if the number is a multiple of 25\n    if num % 25 != 0:\n        return False\n    \n    # Check if the number is a multiple of 26\n    if num % 26 != 0:\n        return False\n    \n    # Check if the number is a multiple of 27\n    if num % 27 != 0:\n        return False\n    \n    # Check if the number is a multiple of 28\n    if num % 28 != 0:\n        return False\n    \n    # Check if the number is a multiple of 29\n    if num % 29 != 0:\n        return False\n    \n    # Check if the number is a multiple of 30\n    if num % 30 != 0:\n        return False\n    \n    # Check if the number is a multiple of 31\n    if num % 31 != 0:\n        return False\n    \n    # Check if the number is a multiple of 32\n    if num % 32 != 0:\n        return False\n    \n    # Check if the number is a multiple of 33\n    if num % 33 != 0:\n        return False\n    \n    # Check if the number is a multiple of 34\n    if num % 34 != 0:\n        return False\n    \n    # Check if the number is a multiple of 35\n    if num % 35 != 0:\n        return False\n    \n    # Check if the number is a multiple of 36\n    if num % 36 != 0:\n        return False\n    \n    # Check if the number is a multiple of 37\n    if num % 37 != 0:\n        return False\n    \n    # Check if the number is a multiple of 38\n    if num % 38 != 0:\n        return False\n    \n    # Check if the number is a multiple of 39\n    if num % 39 != 0:\n        return False\n    \n    # Check if the number is a multiple of 40\n    if num % 40 != 0:\n        return False\n    \n    # Check if the number is a multiple of 41\n    if num % 41 !="}
{"task_id": "Mbpp/56", "completion": "def check(num):\n    return num == 2 * (10**len(str(num))) - 1 - num"}
{"task_id": "Mbpp/57", "completion": "def find_Max_Num(digits):\n    # Convert the list of digits into a string\n    num_str = ''.join(map(str, digits))\n    \n    # Sort the string in descending order\n    sorted_str = ''.join(sorted(num_str, reverse=True))\n    \n    # Convert the sorted string back into an integer\n    max_num = int(sorted_str)\n    \n    return max_num"}
{"task_id": "Mbpp/58", "completion": "def opposite_Signs(a, b):\n    return a < 0 and b > 0 or a > 0 and b < 0"}
{"task_id": "Mbpp/59", "completion": "def is_octagonal(n):\n    \"\"\"\n    This function finds the nth octagonal number.\n    \"\"\"\n    return n*(3*n-2)"}
{"task_id": "Mbpp/61", "completion": "def count_Substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            sub = s[i:j]\n            if sum(int(c) for c in sub) == len(sub):\n                count += 1\n    return count"}
{"task_id": "Mbpp/62", "completion": "def smallest_num(lst):\n    return min(lst)"}
{"task_id": "Mbpp/63", "completion": "def max_difference(tuples):\n    min_val = float('inf')\n    max_diff = 0\n    for t in tuples:\n        min_val = min(min_val, t[0])\n        max_diff = max(max_diff, t[1] - min_val)\n    return max_diff"}
{"task_id": "Mbpp/64", "completion": "def subject_marks(lst):\n    return sorted(lst, key=lambda x: x[1])"}
{"task_id": "Mbpp/65", "completion": "def recursive_list_sum(lst):\n    total = 0\n    for element in lst:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total"}
{"task_id": "Mbpp/66", "completion": "def pos_count(lst):\n    return sum(1 for x in lst if x > 0)"}
{"task_id": "Mbpp/67", "completion": "def bell_number(n):\n    bell = [[0 for x in range(n+1)] for x in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]"}
{"task_id": "Mbpp/68", "completion": "def is_Monotonic(arr):\n    return all(arr[i] <= arr[i+1] for i in range(len(arr)-1)) or all(arr[i] >= arr[i+1] for i in range(len(arr)-1))"}
{"task_id": "Mbpp/69", "completion": "def is_sublist(main_list, sublist):\n    main_list_index = 0\n    for item in main_list:\n        if item == sublist[main_list_index]:\n            main_list_index += 1\n            if main_list_index == len(sublist):\n                return True\n    return False"}
{"task_id": "Mbpp/70", "completion": "def get_equal(*tuples):\n    if not tuples:\n        return True\n    length = len(tuples[0])\n    for t in tuples:\n        if len(t) != length:\n            return False\n    return True"}
{"task_id": "Mbpp/71", "completion": "def comb_sort(arr):\n    gap = len(arr)\n    shrink_factor = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink_factor)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n\n        i = 0\n        while i + gap < len(arr):\n            if arr[i] > arr[i + gap]:\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                sorted = False\n            i += 1\n\n    return arr"}
{"task_id": "Mbpp/72", "completion": "def dif_Square(n):\n    for i in range(int(n**0.5) + 1):\n        for j in range(int(n**0.5) + 1):\n            if i*i + j*j == n:\n                return True\n    return False"}
{"task_id": "Mbpp/74", "completion": "def is_samepatterns(patterns, colors):\n    # Check if the lengths of both lists are equal\n    if len(patterns) != len(colors):\n        return False\n    \n    # Iterate over the lists\n    for i in range(len(patterns)):\n        # Check if the current pattern is a substring of the color\n        if patterns[i] not in colors[i]:\n            return False\n    \n    return True"}
{"task_id": "Mbpp/75", "completion": "def find_tuples(tuples_list, k):\n    result = []\n    for t in tuples_list:\n        if all(x % k == 0 for x in t):\n            result.append(t)\n    return result"}
{"task_id": "Mbpp/77", "completion": "def is_Divisible_by_11(num):\n    return num % 11 == 0"}
{"task_id": "Mbpp/79", "completion": "def word_len(word):\n    return len(word) % 2 != 0"}
{"task_id": "Mbpp/80", "completion": "def tetrahedral_number(n):\n    return n * (n - 1) * (n - 2) // 6"}
{"task_id": "Mbpp/82", "completion": "import math\n\ndef volume_sphere(radius):\n    return (4/3) * math.pi * radius**3"}
{"task_id": "Mbpp/84", "completion": "def sequence(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2) - sequence(n-3)"}
{"task_id": "Mbpp/85", "completion": "import math\n\ndef surfacearea_sphere(radius):\n    return 4 * math.pi * radius ** 2"}
{"task_id": "Mbpp/86", "completion": "def centered_hexagonal_number(n):\n    return n * (2 * n - 1)"}
{"task_id": "Mbpp/87", "completion": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"}
{"task_id": "Mbpp/88", "completion": "def freq_count(lst):\n    freq_dict = {}\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    return freq_dict"}
{"task_id": "Mbpp/89", "completion": "def closest_num(n):\n    return n - 1"}
{"task_id": "Mbpp/90", "completion": "def len_log(words):\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"}
{"task_id": "Mbpp/91", "completion": "def find_substring(lst, query):\n    for el in lst:\n        if query in el:\n            return True\n    return False"}
{"task_id": "Mbpp/92", "completion": "def is_undulating(n):\n    n = str(n)\n    return any(n[i] != n[i+1] for i in range(len(n)-1))"}
{"task_id": "Mbpp/93", "completion": "def power(a, b):\n    return a ** b"}
{"task_id": "Mbpp/94", "completion": "def index_minimum(lst):\n    return min(lst, key=lambda x: x[1])[0]"}
{"task_id": "Mbpp/95", "completion": "def Find_Min_Length(lst):\n    return min(len(lst) for lst in lst)"}
{"task_id": "Mbpp/96", "completion": "def divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"}
{"task_id": "Mbpp/97", "completion": "def frequency_lists(lists):\n    frequency = {}\n    for sublist in lists:\n        for item in sublist:\n            if item in frequency:\n                frequency[item] += 1\n            else:\n                frequency[item] = 1\n    return frequency"}
{"task_id": "Mbpp/98", "completion": "import math\n\ndef multiply_num(lst):\n    product = 1\n    for num in lst:\n        product *= num\n    return product / len(lst)"}
{"task_id": "Mbpp/99", "completion": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary"}
{"task_id": "Mbpp/100", "completion": "def next_smallest_palindrome(num):\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]"}
{"task_id": "Mbpp/101", "completion": "def kth_element(arr, k):\n    return arr[k-1]"}
{"task_id": "Mbpp/102", "completion": "def snake_to_camel(word):\n    return \"\".join(x.capitalize() for x in word.split(\"_\"))"}
{"task_id": "Mbpp/103", "completion": "def eulerian_num(n, m):\n    \"\"\"\n    Calculate the Eulerian number a(n, m).\n    \"\"\"\n    return (m**n - (-m)**n) // (n * (m - 1))"}
{"task_id": "Mbpp/104", "completion": "def sort_sublists(lists):\n    return [sorted(sublist) for sublist in lists]"}
{"task_id": "Mbpp/105", "completion": "def count(lst):\n    return sum(1 for x in lst if x is True)"}
{"task_id": "Mbpp/106", "completion": "def add_lists(lst, tup):\n    return tup + (lst)"}
{"task_id": "Mbpp/108", "completion": "def merge_sorted_list(list1, list2, list3):\n    merged_list = list1 + list2 + list3\n    merged_list.sort()\n    return merged_list"}
{"task_id": "Mbpp/109", "completion": "def odd_Equivalent(binary_string, rotations):\n    # Convert binary string to integer\n    num = int(binary_string, 2)\n    \n    # Initialize count of odd numbers\n    odd_count = 0\n    \n    # Perform rotations\n    for _ in range(rotations):\n        # Rotate number to the left by 1 position\n        num = (num << 1) | (num >> (len(binary_string) - 1))\n        \n        # Count odd numbers\n        odd_count += bin(num).count('1')\n    \n    return odd_count"}
{"task_id": "Mbpp/111", "completion": "def common_in_nested_lists(nested_lists):\n    common_elements = set(nested_lists[0])\n    for lst in nested_lists[1:]:\n        common_elements = common_elements.intersection(set(lst))\n    return list(common_elements)"}
{"task_id": "Mbpp/113", "completion": "def check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False"}
{"task_id": "Mbpp/116", "completion": "def tuple_to_int(t):\n    return int(''.join(map(str, t)))"}
{"task_id": "Mbpp/118", "completion": "def string_to_list(s):\n    return s.split()"}
{"task_id": "Mbpp/119", "completion": "def search(arr):\n    for i in range(1, len(arr)):\n        if arr[i] != arr[i-1]:\n            return arr[i]\n    return arr[-1]"}
{"task_id": "Mbpp/120", "completion": "def max_product_tuple(lst):\n    max_product = float('-inf')\n    for tup in lst:\n        product = tup[0] * tup[1]\n        if product > max_product:\n            max_product = product\n    return max_product"}
{"task_id": "Mbpp/123", "completion": "def amicable_numbers_sum(n):\n    def is_amicable(a, b):\n        return sum(int(x) for x in str(a)) == b and sum(int(x) for x in str(b)) == a\n\n    total = 0\n    for a in range(1, n + 1):\n        for b in range(a, n + 1):\n            if is_amicable(a, b):\n                total += a\n                total += b\n    return total"}
{"task_id": "Mbpp/124", "completion": "import math\n\ndef angle_complex(x, y):\n    return math.atan2(y, x)"}
{"task_id": "Mbpp/125", "completion": "def find_length(binary_string):\n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n\n    for char in binary_string:\n        if char == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        max_diff = max(max_diff, count_0 + count_1)\n\n    return max_diff"}
{"task_id": "Mbpp/126", "completion": "def sum_of_common_divisors(a, b):\n    divisors = set()\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.add(i)\n    return sum(divisors)"}
{"task_id": "Mbpp/127", "completion": "def multiply_int(a, b):\n    return a * b"}
{"task_id": "Mbpp/128", "completion": "def long_words(n, text):\n    words = text.split()\n    return [word for word in words if len(word) > n]"}
{"task_id": "Mbpp/129", "completion": "def magic_square_test(matrix):\n    # Check if the matrix is square\n    if len(matrix) != len(matrix[0]):\n        return False\n    \n    # Calculate the sum of each row, column and diagonal\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(matrix[i][j] for i in range(len(matrix))) for j in range(len(matrix[0]))]\n    diag_sums = [sum(matrix[i][i] for i in range(len(matrix)))]\n    if len(matrix) > 1:\n        diag_sums.append(sum(matrix[i][len(matrix)-1-i] for i in range(len(matrix))))\n    \n    # Check if all sums are equal\n    return all(sums == row_sums[0] for sums in (row_sums, col_sums, diag_sums))"}
{"task_id": "Mbpp/130", "completion": "def max_occurrences(lst):\n    freq_dict = {}\n    for item in lst:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    max_freq = max(freq_dict.values())\n    max_items = [item for item, freq in freq_dict.items() if freq == max_freq]\n    return max_items[0]"}
{"task_id": "Mbpp/131", "completion": "def reverse_vowels(s):\n    vowels = \"aeiouAEIOU\"\n    s_list = list(s)\n    left, right = 0, len(s_list) - 1\n\n    while left < right:\n        while s_list[left] not in vowels and left < right:\n            left += 1\n        while s_list[right] not in vowels and left < right:\n            right -= 1\n        s_list[left], s_list[right] = s_list[right], s_list[left]\n        left += 1\n        right -= 1\n\n    return ''.join(s_list)"}
{"task_id": "Mbpp/132", "completion": "def tup_string(tup):\n    return ''.join(tup)"}
{"task_id": "Mbpp/133", "completion": "def sum_negativenum(nums):\n    return sum(num for num in nums if num < 0)"}
{"task_id": "Mbpp/135", "completion": "def hexagonal_num(n):\n    return n * (2 * n - 1)"}
{"task_id": "Mbpp/137", "completion": "import math\n\ndef zero_count(arr):\n    zero_count = sum(1 for x in arr if x == 0)\n    non_zero_count = len(arr) - zero_count\n    return zero_count / non_zero_count if non_zero_count != 0 else 0"}
{"task_id": "Mbpp/138", "completion": "def is_Sum_Of_Powers_Of_Two(n):\n    # Initialize a variable to store the current power of 2\n    power = 0\n    # Initialize a variable to store the current sum\n    current_sum = 0\n    # Iterate until the current sum is less than or equal to n\n    while current_sum <= n:\n        # If the current sum is equal to n, return True\n        if current_sum == n:\n            return True\n        # Otherwise, increment the power of 2 and update the current sum\n        power += 1\n        current_sum += 2 ** power\n    # If the loop completes without finding a match, return False\n    return False"}
{"task_id": "Mbpp/139", "completion": "import math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius"}
{"task_id": "Mbpp/140", "completion": "def extract_singly(lst):\n    return set(num for sublist in lst for num in sublist)"}
{"task_id": "Mbpp/141", "completion": "def pancake_sort(lst):\n    n = len(lst)\n    for i in range(n):\n        max_idx = i\n        for j in range(i+1, n):\n            if lst[j] > lst[max_idx]:\n                max_idx = j\n        if max_idx != i:\n            lst[i:max_idx+1] = reversed(lst[i:max_idx+1])\n            lst[0:max_idx+1] = reversed(lst[0:max_idx+1])\n    return lst"}
{"task_id": "Mbpp/142", "completion": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"}
{"task_id": "Mbpp/145", "completion": "def max_Abs_Diff(arr):\n    return max(arr) - min(arr)"}
{"task_id": "Mbpp/160", "completion": "def find_solution(a, b, n):\n    if a == 0:\n        if b == 0:\n            return None\n        else:\n            return None\n    else:\n        gcd = a\n        while b != 0:\n            gcd, a, b = b, b, a % b\n        if n % gcd != 0:\n            return None\n        else:\n            return (n // gcd, gcd)"}
{"task_id": "Mbpp/161", "completion": "def remove_elements(list1, list2):\n    return [x for x in list1 if x not in list2]"}
{"task_id": "Mbpp/162", "completion": "def sum_series(n):\n    total = 0\n    for i in range(n // 2 + 1):\n        total += n - 2 * i\n    return total"}
{"task_id": "Mbpp/165", "completion": "def count_char_position(s):\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for i in range(len(s)):\n        if s[i].lower() == alphabet[i].lower():\n            count += 1\n    return count"}
{"task_id": "Mbpp/166", "completion": "def find_even_pair(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if (lst[i] ^ lst[j]) % 2 == 0:\n                count += 1\n    return count"}
{"task_id": "Mbpp/167", "completion": "def next_power_of_2(n):\n    if n == 0:\n        return 1\n    else:\n        return 1 << (n - 1).bit_length()"}
{"task_id": "Mbpp/168", "completion": "def frequency(lst, num):\n    return lst.count(num)"}
{"task_id": "Mbpp/170", "completion": "def sum_range_list(lst, start, end):\n    return sum(lst[start:end+1])"}
{"task_id": "Mbpp/171", "completion": "def perimeter_pentagon(side_length):\n    return 5 * side_length"}
{"task_id": "Mbpp/172", "completion": "def count_occurance(s):\n    return s.count('std')"}
{"task_id": "Mbpp/222", "completion": "def check_type(t):\n    return all(isinstance(x, type(t[0])) for x in t)"}
{"task_id": "Mbpp/223", "completion": "def is_majority(arr, n, element):\n    count = 0\n    for i in range(n):\n        if arr[i] == element:\n            count += 1\n    return count > n // 2"}
{"task_id": "Mbpp/224", "completion": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"}
{"task_id": "Mbpp/226", "completion": "def odd_values_string(s):\n    return ''.join([s[i] for i in range(len(s)) if i % 2 == 0])"}
{"task_id": "Mbpp/227", "completion": "def min_of_three(a, b, c):\n    return min(a, b, c)"}
{"task_id": "Mbpp/230", "completion": "def replace_blank(string, char):\n    return string.replace(\" \", char)"}
{"task_id": "Mbpp/232", "completion": "def larg_nnum(lst, n):\n    return sorted(lst, reverse=True)[:n]"}
{"task_id": "Mbpp/233", "completion": "import math\n\ndef lateralsurface_cylinder(radius, height):\n    return 2 * math.pi * radius * height"}
{"task_id": "Mbpp/234", "completion": "def volume_cube(side_length):\n    return side_length ** 3"}
{"task_id": "Mbpp/235", "completion": "def even_bit_set_number(n):\n    return n | (1 << 1)"}
{"task_id": "Mbpp/237", "completion": "def check_occurences(lst):\n    count_dict = {}\n    for tup in lst:\n        if tup in count_dict:\n            count_dict[tup] += 1\n        else:\n            count_dict[tup] = 1\n    return count_dict"}
{"task_id": "Mbpp/238", "completion": "def number_of_substrings(s):\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if s[i:j]:\n                count += 1\n    return count"}
{"task_id": "Mbpp/239", "completion": "def get_total_number_of_sequences(m, n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return get_total_number_of_sequences(m, n-1) * (m - 2 * get_total_number_of_sequences(m, n-1) + 1)"}
{"task_id": "Mbpp/240", "completion": "def replace_list(list1, list2):\n    list1[-1:] = list2\n    return list1"}
{"task_id": "Mbpp/242", "completion": "def count_charac(s):\n    return len(s)"}
{"task_id": "Mbpp/244", "completion": "def next_Perfect_Square(n):\n    return int(n**2) + 1"}
{"task_id": "Mbpp/245", "completion": "def max_sum(arr):\n    n = len(arr)\n    if n < 3:\n        return max(arr)\n\n    incl = arr[0]\n    excl = 0\n\n    for i in range(1, n):\n        new_excl = max(incl, excl)\n        incl = excl + max(arr[i], 0)\n        excl = new_excl\n\n    return max(incl, excl)"}
{"task_id": "Mbpp/247", "completion": "def lps(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n - 1, -1, -1):\n        dp[i][i] = 1\n        for j in range(i + 1, n):\n            if s[i] == s[j]:\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\n    return dp[0][n - 1]"}
{"task_id": "Mbpp/250", "completion": "def count_X(tup, elem):\n    return tup.count(elem)"}
{"task_id": "Mbpp/251", "completion": "def insert_element(lst, element):\n    return [element] + lst"}
{"task_id": "Mbpp/252", "completion": "import cmath\n\ndef convert(z):\n    r = abs(z)\n    theta = cmath.phase(z)\n    return (r, theta)"}
{"task_id": "Mbpp/253", "completion": "def count_integer(lst):\n    return sum(1 for x in lst if isinstance(x, int))"}
{"task_id": "Mbpp/255", "completion": "from itertools import product\n\ndef combinations_colors(lst, n):\n    return list(product(lst, repeat=n))"}
{"task_id": "Mbpp/256", "completion": "def count_Primes_nums(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for num in range(2, n):\n        if is_prime(num):\n            count += 1\n    return count"}
{"task_id": "Mbpp/257", "completion": "def swap_numbers(num1, num2):\n    return (num2, num1)"}
{"task_id": "Mbpp/259", "completion": "def maximize_elements(t1, t2):\n    result = []\n    for i in range(len(t1)):\n        result.append((max(t1[i][0], t2[i][0]), max(t1[i][1], t2[i][1])))\n    return tuple(result)"}
{"task_id": "Mbpp/260", "completion": "def newman_prime(n):\n    \"\"\"\n    Find the nth newman–shanks–williams prime number.\n    \"\"\"\n    def is_prime(num):\n        \"\"\"\n        Check if a number is prime.\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def next_prime(start):\n        \"\"\"\n        Find the next prime number after start.\n        \"\"\"\n        num = start + 1\n        while not is_prime(num):\n            num += 1\n        return num\n\n    prime = 2\n    count = 0\n    while count < n:\n        prime = next_prime(prime)\n        count += 1\n\n    return prime"}
{"task_id": "Mbpp/261", "completion": "def division_elements(t1, t2):\n    return tuple(a/b for a, b in zip(t1, t2))"}
{"task_id": "Mbpp/262", "completion": "def split_two_parts(lst, L):\n    return lst[:L], lst[L:]"}
{"task_id": "Mbpp/264", "completion": "def dog_age(age_in_human_years):\n    # A dog's age is approximately 1/7 of a human's age\n    return age_in_human_years * 1/7"}
{"task_id": "Mbpp/265", "completion": "def list_split(lst, n):\n    return [lst[i:i+n] for i in range(0, len(lst), n)]"}
{"task_id": "Mbpp/266", "completion": "def lateralsurface_cube(side_length):\n    return 6 * side_length ** 2"}
{"task_id": "Mbpp/267", "completion": "def square_Sum(n):\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**2\n    return sum"}
{"task_id": "Mbpp/268", "completion": "def find_star_num(n):\n    if n == 1:\n        return 1\n    else:\n        return find_star_num(n-1) + 2*n - 1"}
{"task_id": "Mbpp/269", "completion": "def ascii_value(char):\n    return ord(char)"}
{"task_id": "Mbpp/270", "completion": "def sum_even_and_even_index(lst):\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 == 0)"}
{"task_id": "Mbpp/271", "completion": "def even_Power_Sum(n):\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**5\n    return sum"}
{"task_id": "Mbpp/272", "completion": "def rear_extract(lst):\n    return [t[2] for t in lst]"}
{"task_id": "Mbpp/273", "completion": "def substract_elements(tuple1, tuple2):\n    return tuple(x - y for x, y in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/274", "completion": "def even_binomial_Coeff_Sum(n):\n    total_sum = 0\n    for i in range(0, n, 2):\n        total_sum += binomial_coeff(n, i)\n    return total_sum\n\ndef binomial_coeff(n, k):\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_coeff(n-1, k-1) + binomial_coeff(n-1, k)"}
{"task_id": "Mbpp/276", "completion": "import math\n\ndef volume_cylinder(radius, height):\n    return math.pi * radius**2 * height"}
{"task_id": "Mbpp/277", "completion": "def dict_filter(dictionary, n):\n    return {k: v for k, v in dictionary.items() if v >= n}"}
{"task_id": "Mbpp/278", "completion": "def count_first_elements(t):\n    count = 0\n    for i in t:\n        if isinstance(i, tuple):\n            count += count_first_elements(i)\n        else:\n            return count\n    return count"}
{"task_id": "Mbpp/279", "completion": "def is_num_decagonal(n):\n    return n*(2*n - 1)//2"}
{"task_id": "Mbpp/280", "completion": "def sequential_search(arr, element):\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return (True, i)\n    return (False, -1)"}
{"task_id": "Mbpp/281", "completion": "def all_unique(lst):\n    return len(lst) == len(set(lst))"}
{"task_id": "Mbpp/282", "completion": "def sub_list(list1, list2):\n    return [a - b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/283", "completion": "def validate(n):\n    n = str(n)\n    for digit in n:\n        if n.count(digit) > int(digit):\n            return False\n    return True"}
{"task_id": "Mbpp/284", "completion": "def check_element(lst, element):\n    return all(item == element for item in lst)"}
{"task_id": "Mbpp/285", "completion": "def text_match_two_three(s):\n    return 'ab' in s or 'abb' in s or 'abbb' in s"}
{"task_id": "Mbpp/286", "completion": "def max_sub_array_sum_repeated(arr, k, m):\n    # Repeat the array k times\n    repeated_arr = arr * k\n    \n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    # Iterate through the repeated array\n    for num in repeated_arr:\n        # Add the current number to the current sum\n        current_sum += num\n        \n        # If the current sum is greater than the max sum, update the max sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n        \n        # If the current sum is less than or equal to 0, reset the current sum\n        if current_sum <= 0:\n            current_sum = 0\n    \n    # Return the max sum\n    return max_sum"}
{"task_id": "Mbpp/287", "completion": "def square_Sum(n):\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**2\n    return sum"}
{"task_id": "Mbpp/290", "completion": "def max_length(lst):\n    max_length = 0\n    max_list = []\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n            max_list = sublist\n    return max_length, max_list"}
{"task_id": "Mbpp/292", "completion": "def find(a, b):\n    return a // b"}
{"task_id": "Mbpp/293", "completion": "import math\n\ndef otherside_rightangle(a, b):\n    # Calculate the third side using the Pythagorean theorem\n    c = math.sqrt(a**2 + b**2)\n    return c"}
{"task_id": "Mbpp/294", "completion": "def max_val(lst):\n    max_val = lst[0]\n    for i in lst:\n        if i > max_val:\n            max_val = i\n    return max_val"}
{"task_id": "Mbpp/296", "completion": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count"}
{"task_id": "Mbpp/297", "completion": "def flatten_list(lst):\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"}
{"task_id": "Mbpp/299", "completion": "def max_aggregate(lst):\n    max_name = max(lst, key=lambda x: x[1])\n    return max_name"}
{"task_id": "Mbpp/300", "completion": "import math\n\ndef count_binary_seq(n):\n    total_count = 2 ** (2 * n)\n    first_half_count = 2 ** n\n    return total_count - first_half_count"}
{"task_id": "Mbpp/301", "completion": "def dict_depth(d):\n    if not isinstance(d, dict):\n        return 0\n    else:\n        return 1 + max(dict_depth(v) for v in d.values())"}
{"task_id": "Mbpp/305", "completion": "def start_withp(words):\n    for word in words:\n        if word.startswith('p'):\n            return (word.split()[0], word.split()[1])\n    return None"}
{"task_id": "Mbpp/306", "completion": "def max_sum_increasing_subseq(arr, n, i, k):\n    if i > n or k > n or i < 0 or k < 0:\n        return -1\n\n    dp = [0] * (n + 1)\n    for j in range(1, n + 1):\n        dp[j] = max(dp[j - 1], arr[j - 1])\n\n    for j in range(i + 1, n + 1):\n        if j == k:\n            break\n        dp[j] = max(dp[j], dp[j - 1] + arr[j - 1])\n\n    return dp[n]"}
{"task_id": "Mbpp/308", "completion": "def large_product(list1, list2, k):\n    # Sort the lists in descending order\n    list1.sort(reverse=True)\n    list2.sort(reverse=True)\n\n    # Initialize an empty list to store the products\n    products = []\n\n    # Iterate through the lists and multiply the top k elements\n    for i in range(k):\n        product = list1[i] * list2[i]\n        products.append(product)\n\n    return products"}
{"task_id": "Mbpp/309", "completion": "def maximum(a, b):\n    return a if a > b else b"}
{"task_id": "Mbpp/310", "completion": "def string_to_tuple(s):\n    return tuple(s)"}
{"task_id": "Mbpp/311", "completion": "def set_left_most_unset_bit(n):\n    return n | (1 << 31)"}
{"task_id": "Mbpp/312", "completion": "import math\n\ndef volume_cone(radius, height):\n    return (1/3) * math.pi * radius**2 * height"}
{"task_id": "Mbpp/388", "completion": "def highest_Power_of_2(n):\n    power = 0\n    while (1 << power) <= n:\n        power += 1\n    return (1 << (power - 1))"}
{"task_id": "Mbpp/389", "completion": "def find_lucas(n):\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    lucas_prev = 2\n    lucas_curr = 1\n    for _ in range(2, n + 1):\n        lucas_next = lucas_prev + lucas_curr\n        lucas_prev, lucas_curr = lucas_curr, lucas_next\n    return lucas_curr"}
{"task_id": "Mbpp/390", "completion": "def add_string(lst, format_string):\n    return [format_string.format(x) for x in lst]"}
{"task_id": "Mbpp/391", "completion": "def convert_list_dictionary(student_ids, student_names, student_scores):\n    result = []\n    for i in range(len(student_ids)):\n        result.append({student_ids[i]: {student_names[i]: student_scores[i]}})\n    return result"}
{"task_id": "Mbpp/392", "completion": "def get_max_sum(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return max(n, get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5))"}
{"task_id": "Mbpp/394", "completion": "def check_distinct(t):\n    return len(t) == len(set(t))"}
{"task_id": "Mbpp/395", "completion": "def first_non_repeating_character(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char in s:\n        if char_count[char] == 1:\n            return char\n\n    return None"}
{"task_id": "Mbpp/397", "completion": "def median_numbers(a, b, c):\n    sorted_numbers = sorted([a, b, c])\n    median = (sorted_numbers[1] + sorted_numbers[2]) / 2\n    return median"}
{"task_id": "Mbpp/398", "completion": "def sum_of_digits(lst):\n    return sum(int(digit) for number in lst for digit in str(number))"}
{"task_id": "Mbpp/404", "completion": "def minimum(a, b):\n    return a if a < b else b"}
{"task_id": "Mbpp/405", "completion": "def check_tuplex(tup, element):\n    return element in tup"}
{"task_id": "Mbpp/406", "completion": "def find_Parity(n):\n    return n % 2 == 0"}
{"task_id": "Mbpp/409", "completion": "def min_product_tuple(lst):\n    min_product = float('inf')\n    for tup in lst:\n        product = tup[0] * tup[1]\n        if product < min_product:\n            min_product = product\n    return min_product"}
{"task_id": "Mbpp/410", "completion": "def min_val(lst):\n    return min(lst, key=lambda x: (type(x).__name__, x))"}
{"task_id": "Mbpp/412", "completion": "def remove_odd(lst):\n    return [x for x in lst if x % 2 == 0]"}
{"task_id": "Mbpp/413", "completion": "def extract_nth_element(lst, n):\n    return [t[n] for t in lst]"}
{"task_id": "Mbpp/414", "completion": "def overlapping(seq1, seq2):\n    for val in seq1:\n        if val in seq2:\n            return True\n    return False"}
{"task_id": "Mbpp/415", "completion": "def max_Product(arr):\n    arr.sort()\n    return max(arr[-1]*arr[-2], arr[0]*arr[1])"}
{"task_id": "Mbpp/418", "completion": "def Find_Max(lst):\n    max_length = 0\n    max_length_item = []\n    for item in lst:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_length_item = item\n    return max_length_item"}
{"task_id": "Mbpp/419", "completion": "def round_and_sum(numbers):\n    total = 0\n    for num in numbers:\n        total += round(num)\n    return total * len(numbers)"}
{"task_id": "Mbpp/420", "completion": "def cube_Sum(n):\n    sum = 0\n    for i in range(2, 2*n, 2):\n        sum += i**3\n    return sum"}
{"task_id": "Mbpp/421", "completion": "def concatenate_tuple(tup, delimiter='-'):\n    return delimiter.join(str(elem) for elem in tup)"}
{"task_id": "Mbpp/422", "completion": "def find_Average_Of_Cube(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/n"}
{"task_id": "Mbpp/424", "completion": "def extract_rear(tup):\n    return [s[-1] for s in tup]"}
{"task_id": "Mbpp/425", "completion": "def count_element_in_list(lst, element):\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count"}
{"task_id": "Mbpp/426", "completion": "def filter_oddnumbers(lst):\n    return [x for x in lst if x % 2 == 0]"}
{"task_id": "Mbpp/427", "completion": "def change_date_format(date):\n    year, month, day = date.split('-')\n    return f'{day}-{month}-{year}'"}
{"task_id": "Mbpp/428", "completion": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            \n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            \n            arr[j] = temp\n        gap //= 2\n    \n    return arr"}
{"task_id": "Mbpp/429", "completion": "def and_tuples(t1, t2):\n    return tuple(a & b for a, b in zip(t1, t2))"}
{"task_id": "Mbpp/430", "completion": "def parabola_directrix(a, b, c):\n    # Calculate the discriminant\n    d = (b**2) - (4*a*c)\n    \n    # Calculate the two solutions\n    sol1 = (-b - cmath.sqrt(d)) / (2 * a)\n    sol2 = (-b + cmath.sqrt(d)) / (2 * a)\n    \n    # Return the directrix\n    return sol1.real if abs(sol1.imag) < 1e-6 else sol2.real"}
{"task_id": "Mbpp/432", "completion": "def median_trapezium(a, b, c):\n    \"\"\"\n    Calculate the median length of a trapezium.\n\n    Parameters:\n    a (float): length of the first side\n    b (float): length of the second side\n    c (float): height of the trapezium\n\n    Returns:\n    float: median length of the trapezium\n    \"\"\"\n    return (a + b) / 2"}
{"task_id": "Mbpp/433", "completion": "def check_greater(arr, num):\n    for i in arr:\n        if i > num:\n            return True\n    return False"}
{"task_id": "Mbpp/435", "completion": "def last_Digit(n):\n    return n % 10"}
{"task_id": "Mbpp/436", "completion": "def neg_nos(lst):\n    return [num for num in lst if num < 0]"}
{"task_id": "Mbpp/437", "completion": "def remove_odd(s):\n    return ''.join(c for c in s if c.isalpha() and c.islower())"}
{"task_id": "Mbpp/439", "completion": "def multiple_to_single(lst):\n    return int(''.join(map(str, lst)))"}
{"task_id": "Mbpp/440", "completion": "def find_adverb_position(sentence):\n    adverbs = ['clearly', 'quickly', 'slowly', 'carefully', 'eagerly', 'gracefully', 'elegantly', 'gracefully', 'patiently', 'deliberately']\n    for adverb in adverbs:\n        if adverb in sentence:\n            return (sentence.index(adverb), sentence.index(adverb) + len(adverb) - 1, adverb)\n    return None"}
{"task_id": "Mbpp/441", "completion": "def surfacearea_cube(size):\n    return size ** 2 * 6"}
{"task_id": "Mbpp/445", "completion": "def index_multiplication(tup1, tup2):\n    return tuple(tuple(a*b for a, b in zip(tup1, tup2)) for tup1, tup2 in zip(tup1, tup2))"}
{"task_id": "Mbpp/446", "completion": "def count_Occurrence(tup, lst):\n    count = 0\n    for i in lst:\n        count += tup.count(i)\n    return count"}
{"task_id": "Mbpp/447", "completion": "def cube_nums(lst):\n    return [i**3 for i in lst]"}
{"task_id": "Mbpp/448", "completion": "def cal_sum(n):\n    if n == 0:\n        return 0\n    else:\n        return n + cal_sum(n-1)"}
{"task_id": "Mbpp/450", "completion": "def extract_string(lst, size):\n    return [s for s in lst if len(s) == size]"}
{"task_id": "Mbpp/451", "completion": "def remove_whitespaces(s):\n    return ''.join(s.split())"}
{"task_id": "Mbpp/453", "completion": "def sumofFactors(n):\n    sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"}
{"task_id": "Mbpp/454", "completion": "def text_match_wordz(text):\n    return 'z' in text"}
{"task_id": "Mbpp/455", "completion": "def check_monthnumb_number(month_number):\n    \"\"\"\n    Check if the given month number contains 31 days.\n\n    Args:\n    month_number (int): The number of the month.\n\n    Returns:\n    bool: True if the month contains 31 days, False otherwise.\n    \"\"\"\n    return month_number in [4, 6, 9, 11]"}
{"task_id": "Mbpp/456", "completion": "def reverse_string_list(string_list):\n    return [s[::-1] for s in string_list]"}
{"task_id": "Mbpp/457", "completion": "def Find_Min(lst):\n    min_length = float('inf')\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"}
{"task_id": "Mbpp/458", "completion": "def rectangle_area(length, width):\n    return length * width"}
{"task_id": "Mbpp/459", "completion": "def remove_uppercase(s):\n    return ''.join(c for c in s if c.islower())"}
{"task_id": "Mbpp/460", "completion": "def Extract(lst):\n    return [sublist[0] for sublist in lst]"}
{"task_id": "Mbpp/462", "completion": "def combinations_list(lst):\n    if not lst:\n        return [[]]\n    else:\n        first = lst[0]\n        remaining = lst[1:]\n        combinations = combinations_list(remaining)\n        new_combinations = [comb + [first] for comb in combinations]\n        return new_combinations + combinations"}
{"task_id": "Mbpp/463", "completion": "def max_subarray_product(arr):\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    \n    for num in arr[1:]:\n        if num < 0:\n            max_product, min_product = min_product, max_product\n        \n        max_product = max(num, max_product * num)\n        min_product = min(num, min_product * num)\n        \n        result = max(result, max_product)\n    \n    return result"}
{"task_id": "Mbpp/465", "completion": "def drop_empty(d):\n    return {k: v for k, v in d.items() if v is not None}"}
{"task_id": "Mbpp/468", "completion": "def max_product(arr):\n    if not arr:\n        return 0\n\n    max_product = arr[0]\n    second_max = second_min = arr[0]\n\n    for num in arr[1:]:\n        if num > max_product:\n            second_max, max_product = max_product, num\n        elif num > second_max:\n            second_max = num\n        if num < 0:\n            second_max, second_min = second_min, max_product\n\n    return max(max_product * second_max, second_min * second_max)"}
{"task_id": "Mbpp/470", "completion": "def add_pairwise(t):\n    return tuple(t[i] + t[i+1] for i in range(len(t)-1))"}
{"task_id": "Mbpp/471", "completion": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"}
{"task_id": "Mbpp/472", "completion": "def check_Consecutive(lst):\n    return all(lst[i+1] == lst[i] + 1 for i in range(len(lst)-1))"}
{"task_id": "Mbpp/473", "completion": "def tuple_intersection(list1, list2):\n    set1 = set(list1)\n    set2 = set(list2)\n    return set1.intersection(set2)"}
{"task_id": "Mbpp/474", "completion": "def replace_char(s, old_char, new_char):\n    return s.replace(old_char, new_char)"}
{"task_id": "Mbpp/475", "completion": "def sort_counter(counter):\n    return sorted(counter.items(), key=lambda x: x[1], reverse=True)"}
{"task_id": "Mbpp/476", "completion": "def big_sum(arr):\n    return max(arr) + min(arr)"}
{"task_id": "Mbpp/477", "completion": "def is_lower(s):\n    return s.lower()"}
{"task_id": "Mbpp/478", "completion": "def remove_lowercase(s):\n    result = \"\"\n    i = 0\n    while i < len(s):\n        if s[i].islower():\n            while i < len(s) and s[i].islower():\n                i += 1\n        else:\n            result += s[i]\n            i += 1\n    return result"}
{"task_id": "Mbpp/479", "completion": "def first_Digit(n):\n    return n // 10**(len(str(n)) - 1)"}
{"task_id": "Mbpp/554", "completion": "def Split(nums):\n    return [num for num in nums if num % 2 != 0]"}
{"task_id": "Mbpp/555", "completion": "def difference(n):\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_numbers = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_numbers"}
{"task_id": "Mbpp/556", "completion": "def find_Odd_Pair(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (arr[i] ^ arr[j]) % 2 == 1:\n                count += 1\n    return count"}
{"task_id": "Mbpp/557", "completion": "def toggle_string(s):\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in s)"}
{"task_id": "Mbpp/558", "completion": "def digit_distance_nums(num1, num2):\n    # Convert the numbers to strings\n    str1 = str(num1)\n    str2 = str(num2)\n    \n    # Initialize the sum of differences\n    sum_diff = 0\n    \n    # Iterate through the digits of the numbers\n    for i in range(len(str1)):\n        # Calculate the absolute difference between the digits\n        diff = abs(int(str1[i]) - int(str2[i]))\n        # Add the difference to the sum\n        sum_diff += diff\n    \n    return sum_diff"}
{"task_id": "Mbpp/559", "completion": "def max_sub_array_sum(arr, k):\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(len(arr)):\n        current_sum += arr[i]\n        if i >= k:\n            current_sum -= arr[i - k]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum"}
{"task_id": "Mbpp/560", "completion": "def union_elements(t1, t2):\n    return sorted(set(t1) | set(t2))"}
{"task_id": "Mbpp/562", "completion": "def Find_Max_Length(lst):\n    max_length = 0\n    for sublist in lst:\n        max_length = max(max_length, len(sublist))\n    return max_length"}
{"task_id": "Mbpp/563", "completion": "def extract_values(s):\n    values = []\n    start = 0\n    while start < len(s):\n        if s[start] == '\"':\n            start += 1\n            end = s.find('\"', start)\n            if end != -1:\n                values.append(s[start:end])\n                start = end + 1\n            else:\n                break\n        else:\n            start += 1\n    return values"}
{"task_id": "Mbpp/564", "completion": "def count_Pairs(lst, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if lst[i] != lst[j]:\n                count += 1\n    return count"}
{"task_id": "Mbpp/565", "completion": "def split(s):\n    return list(s)"}
{"task_id": "Mbpp/566", "completion": "def sum_digits(n):\n    return sum(int(digit) for digit in str(n))"}
{"task_id": "Mbpp/567", "completion": "def issort_list(lst):\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))"}
{"task_id": "Mbpp/568", "completion": "def empty_list(n):\n    return [{} for _ in range(n)]"}
{"task_id": "Mbpp/569", "completion": "def sort_sublists(lists):\n    return [sorted(sublist) for sublist in lists]"}
{"task_id": "Mbpp/572", "completion": "def two_unique_nums(nums):\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n        if len(unique_nums) == 2:\n            break\n    return unique_nums"}
{"task_id": "Mbpp/573", "completion": "def unique_product(lst):\n    unique_nums = set(lst)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"}
{"task_id": "Mbpp/576", "completion": "def is_Sub_Array(main_list, sub_list):\n    if len(sub_list) > len(main_list):\n        return False\n    for i in range(len(main_list) - len(sub_list) + 1):\n        if main_list[i:i+len(sub_list)] == sub_list:\n            return True\n    return False"}
{"task_id": "Mbpp/577", "completion": "def last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    else:\n        factorial = 1\n        for i in range(1, n + 1):\n            factorial *= i\n        return int(str(factorial)[-1])"}
{"task_id": "Mbpp/578", "completion": "def interleave_lists(list1, list2, list3):\n    return [item for pair in zip(list1, list2, list3) for item in pair]"}
{"task_id": "Mbpp/579", "completion": "def find_dissimilar(t1, t2):\n    return tuple(set(t1) ^ set(t2))"}
{"task_id": "Mbpp/580", "completion": "def extract_even(t):\n    if isinstance(t, tuple):\n        return tuple(extract_even(item) for item in t if item % 2 == 0)\n    else:\n        return t"}
{"task_id": "Mbpp/581", "completion": "def surface_Area(base, height):\n    return base * height * 2 + base * base"}
{"task_id": "Mbpp/583", "completion": "def catalan_number(n):\n    if n <= 1:\n        return 1\n    res = 0\n    for i in range(n):\n        res += catalan_number(i) * catalan_number(n - i - 1)\n    return res"}
{"task_id": "Mbpp/585", "completion": "def expensive_items(data, n):\n    sorted_data = sorted(data, key=lambda x: x['price'], reverse=True)\n    return sorted_data[:n]"}
{"task_id": "Mbpp/586", "completion": "def split_Arr(arr, n):\n    return arr[n:] + arr[:n]"}
{"task_id": "Mbpp/587", "completion": "def list_tuple(lst):\n    return tuple(lst)"}
{"task_id": "Mbpp/588", "completion": "def big_diff(lst):\n    return max(lst) - min(lst)"}
{"task_id": "Mbpp/589", "completion": "def perfect_squares(start, end):\n    squares = []\n    for i in range(start, end + 1):\n        root = i ** 0.5\n        if root == int(root):\n            squares.append(i)\n    return squares"}
{"task_id": "Mbpp/590", "completion": "import cmath\n\ndef polar_rect(r, theta):\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x, y)"}
{"task_id": "Mbpp/591", "completion": "def swap_List(lst):\n    lst[0], lst[-1] = lst[-1], lst[0]\n    return lst"}
{"task_id": "Mbpp/592", "completion": "from math import comb\n\ndef sum_Of_product(n):\n    total = 0\n    for i in range(1, n):\n        total += comb(n, i) * comb(n, i + 1)\n    return total"}
{"task_id": "Mbpp/593", "completion": "def removezero_ip(ip):\n    return \".\".join(str(int(i)) for i in ip.split(\".\"))"}
{"task_id": "Mbpp/594", "completion": "def diff_even_odd(lst):\n    even_num = next(x for x in lst if x % 2 == 0)\n    odd_num = next(x for x in lst if x % 2 != 0)\n    return abs(even_num - odd_num)"}
{"task_id": "Mbpp/596", "completion": "import sys\n\ndef tuple_size(t):\n    return sys.getsizeof(t)"}
{"task_id": "Mbpp/597", "completion": "def find_kth(arr1, arr2, k):\n    len1 = len(arr1)\n    len2 = len(arr2)\n    if len1 == 0:\n        return arr2[k-1]\n    if len2 == 0:\n        return arr1[k-1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    \n    i = min(k // 2, len1) - 1\n    j = min(k // 2, len2) - 1\n    if arr1[i] > arr2[j]:\n        return find_kth(arr1, arr2[j+1:], k - j - 1)\n    else:\n        return find_kth(arr1[i+1:], arr2, k - i - 1)"}
{"task_id": "Mbpp/598", "completion": "def armstrong_number(num):\n    digits = [int(d) for d in str(num)]\n    sum_ = 0\n    for d in digits:\n        sum_ += d ** len(digits)\n    return sum_ == num"}
{"task_id": "Mbpp/599", "completion": "def sum_average(n):\n    total = (n * (n + 1)) // 2\n    average = total / n\n    return total, average"}
{"task_id": "Mbpp/600", "completion": "def is_Even(n):\n    return n % 2 == 0"}
{"task_id": "Mbpp/602", "completion": "def first_repeated_char(s):\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None"}
{"task_id": "Mbpp/603", "completion": "def get_ludic(n):\n    lucid_numbers = []\n    for i in range(1, n + 1):\n        if sum(int(digit) for digit in str(i)) == i:\n            lucid_numbers.append(i)\n    return lucid_numbers"}
{"task_id": "Mbpp/604", "completion": "def reverse_words(s):\n    return ' '.join(s.split()[::-1])"}
{"task_id": "Mbpp/605", "completion": "def prime_num(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/606", "completion": "import math\n\ndef radian_degree(deg):\n    return math.radians(deg)"}
{"task_id": "Mbpp/607", "completion": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"}
{"task_id": "Mbpp/608", "completion": "def bell_Number(n): \n    bell = [[0 for x in range(n+1)] for x in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n        bell[i][0] = bell[i-1][i-1] \n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0]"}
{"task_id": "Mbpp/610", "completion": "def remove_kth_element(lst, k):\n    return lst[:k] + lst[k+1:]"}
{"task_id": "Mbpp/611", "completion": "def max_of_nth(matrix, n):\n    return max(row[n] for row in matrix)"}
{"task_id": "Mbpp/612", "completion": "def merge(lst):\n    first_list = [sublist[0] for sublist in lst]\n    second_list = [sublist[1] for sublist in lst]\n    return [first_list, second_list]"}
{"task_id": "Mbpp/614", "completion": "def cummulative_sum(tuples):\n    total = 0\n    for t in tuples:\n        total += sum(t)\n    return total"}
{"task_id": "Mbpp/615", "completion": "def average_tuple(tuples):\n    return [sum(t)/len(t) for t in tuples]"}
{"task_id": "Mbpp/616", "completion": "def tuple_modulo(t1, t2):\n    return tuple(a % b for a, b in zip(t1, t2))"}
{"task_id": "Mbpp/618", "completion": "def div_list(list1, list2):\n    return [a/b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/619", "completion": "def move_num(s):\n    nums = []\n    for c in s:\n        if c.isdigit():\n            nums.append(c)\n    return ''.join([c for c in s if not c.isdigit()] + nums)"}
{"task_id": "Mbpp/620", "completion": "def largest_subset(nums):\n    nums.sort()\n    n = len(nums)\n    dp = [1] * n\n    max_size = 0\n\n    for i in range(1, n):\n        for j in range(i):\n            if nums[i] % nums[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n        max_size = max(max_size, dp[i])\n\n    return max_size"}
{"task_id": "Mbpp/622", "completion": "def get_median(list1, list2, size):\n    merged_list = sorted(list1 + list2)\n    if size % 2 == 0:\n        return (merged_list[size // 2 - 1] + merged_list[size // 2]) / 2\n    else:\n        return merged_list[size // 2]"}
{"task_id": "Mbpp/623", "completion": "def nth_nums(lst, n):\n    return [x**n for x in lst]"}
{"task_id": "Mbpp/624", "completion": "def is_upper(s):\n    return s.upper()"}
{"task_id": "Mbpp/626", "completion": "import math\n\ndef triangle_area(radius):\n    if radius < 0:\n        return None\n    else:\n        return (math.pi * radius ** 2) / 4"}
{"task_id": "Mbpp/628", "completion": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"}
{"task_id": "Mbpp/629", "completion": "def Split(nums):\n    return [num for num in nums if num % 2 == 0]"}
{"task_id": "Mbpp/630", "completion": "def get_coordinates(coord):\n    x, y = coord\n    return [[x-1, y], [x+1, y], [x, y-1], [x, y+1]]"}
{"task_id": "Mbpp/631", "completion": "def replace_spaces(s):\n    return s.replace(' ', '_').replace('_', ' ')"}
{"task_id": "Mbpp/632", "completion": "def move_zero(lst):\n    return [x for x in lst if x != 0] + [0] * lst.count(0)"}
{"task_id": "Mbpp/633", "completion": "def pair_xor_Sum(lst, k):\n    return sum(x ^ y for x, y in zip(lst, lst[1:])) + (lst[0] ^ k)"}
{"task_id": "Mbpp/635", "completion": "def heap_sort(lst):\n    def heapify(lst, n, i):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n\n        if left < n and lst[i] < lst[left]:\n            largest = left\n\n        if right < n and lst[largest] < lst[right]:\n            largest = right\n\n        if largest != i:\n            lst[i], lst[largest] = lst[largest], lst[i]\n            heapify(lst, n, largest)\n\n    n = len(lst)\n\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(lst, n, i)\n\n    for i in range(n-1, 0, -1):\n        lst[i], lst[0] = lst[0], lst[i]\n        heapify(lst, i, 0)\n\n    return lst"}
{"task_id": "Mbpp/637", "completion": "def noprofit_noloss(amount, price):\n    return amount == price"}
{"task_id": "Mbpp/638", "completion": "def wind_chill(velocity, temperature):\n    \"\"\"\n    Calculate the wind chill index based on the wind velocity in km/h and temperature in Celsius.\n    \"\"\"\n    # Convert temperature to Fahrenheit\n    temperature_f = (temperature * 9/5) + 32\n\n    # Calculate wind chill index\n    wind_chill_index = 13.12 + 0.6215*temperature_f - 11.37*velocity**0.16 + 0.3965*temperature_f*velocity**0.16\n\n    # Round the wind chill index to the nearest integer\n    wind_chill_index = round(wind_chill_index)\n\n    return wind_chill_index"}
{"task_id": "Mbpp/639", "completion": "def sample_nam(names):\n    total_length = 0\n    for name in names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length"}
{"task_id": "Mbpp/641", "completion": "def is_nonagonal(n):\n    return n*(7*n-5)//2"}
{"task_id": "Mbpp/643", "completion": "def text_match_wordz_middle(text):\n    # Check if the string contains 'z' except at the start and end of the word\n    return 'z' in text[1:-1]"}
{"task_id": "Mbpp/644", "completion": "def reverse_Array_Upto_K(arr, k):\n    return arr[:k][::-1] + arr[k:]"}
{"task_id": "Mbpp/720", "completion": "def add_dict_to_tuple(tup, dict):\n    return tup + (dict,)"}
{"task_id": "Mbpp/721", "completion": "def maxAverageOfPath(matrix):\n    n = len(matrix)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = matrix[0][0]\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + matrix[0][j]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j]\n    return dp[n-1][n-1] / (n + n - 1)"}
{"task_id": "Mbpp/722", "completion": "def filter_data(data, min_height, min_weight):\n    return {name: info for name, info in data.items() if info[0] > min_height and info[1] > min_weight}"}
{"task_id": "Mbpp/723", "completion": "def count_same_pair(list1, list2):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n    return count"}
{"task_id": "Mbpp/724", "completion": "def power_base_sum(base, power):\n    result = 0\n    for _ in range(power):\n        result += sum(int(digit) for digit in str(base))\n    return result"}
{"task_id": "Mbpp/725", "completion": "def extract_quotation(s):\n    result = []\n    start = 0\n    while True:\n        start = s.find('\"', start)\n        if start == -1:\n            break\n        end = s.find('\"', start + 1)\n        if end == -1:\n            break\n        result.append(s[start + 1:end])\n        start = end\n    return result"}
{"task_id": "Mbpp/726", "completion": "def multiply_elements(t):\n    return tuple(t[i] * t[i+1] for i in range(len(t)-1))"}
{"task_id": "Mbpp/728", "completion": "def sum_list(a, b):\n    return [a[i] + b[i] for i in range(len(a))]"}
{"task_id": "Mbpp/730", "completion": "def consecutive_duplicates(lst):\n    result = []\n    for i in range(len(lst)):\n        if i == 0 or lst[i] != lst[i-1]:\n            result.append(lst[i])\n    return result"}
{"task_id": "Mbpp/731", "completion": "import math\n\ndef lateralsurface_cone(r, h):\n    return math.pi * r * h"}
{"task_id": "Mbpp/732", "completion": "def replace_specialchar(s):\n    return s.replace(' ', ':').replace(',', ':').replace('.', ':')"}
{"task_id": "Mbpp/733", "completion": "def find_first_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            if mid == 0 or arr[mid - 1] < target:\n                return mid\n            else:\n                right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"task_id": "Mbpp/734", "completion": "def sum_Of_Subarray_Prod(lst):\n    n = len(lst)\n    total = 0\n    for i in range(n):\n        for j in range(i, n):\n            prod = 1\n            for k in range(i, j+1):\n                prod *= lst[k]\n            total += prod\n    return total"}
{"task_id": "Mbpp/735", "completion": "def toggle_middle_bits(n):\n    # Convert the number to binary and remove the '0b' prefix\n    binary = bin(n)[2:]\n    \n    # Toggle the middle bits by flipping the bits at odd indices\n    toggled_binary = ''.join('1' if i % 2 == 0 else '0' for i, bit in enumerate(binary))\n    \n    # Convert the toggled binary back to decimal\n    toggled_number = int(toggled_binary, 2)\n    \n    return toggled_number"}
{"task_id": "Mbpp/736", "completion": "def left_insertion(arr, val):\n    low, high = 0, len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] < val:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return low"}
{"task_id": "Mbpp/737", "completion": "import re\n\ndef check_str(s):\n    pattern = r'^[aeiouAEIOU]'\n    return bool(re.match(pattern, s))"}
{"task_id": "Mbpp/739", "completion": "def find_Index(n):\n    start = 10 ** (n - 1)\n    end = 10 ** n\n    for i in range(start, end):\n        if i * (i + 1) // 2 == i:\n            return i\n    return -1"}
{"task_id": "Mbpp/740", "completion": "def tuple_to_dict(t):\n    return {t[i]: t[i+1] for i in range(0, len(t)-1, 2)}"}
{"task_id": "Mbpp/741", "completion": "def all_Characters_Same(s):\n    if len(s) == 0:\n        return True\n    first_char = s[0]\n    for char in s:\n        if char != first_char:\n            return False\n    return True"}
{"task_id": "Mbpp/742", "completion": "def area_tetrahedron(edge_length):\n    \"\"\"\n    Calculate the area of a tetrahedron.\n\n    :param edge_length: The length of an edge of the tetrahedron\n    :return: The area of the tetrahedron\n    \"\"\"\n    return (edge_length ** 2) * (3 ** 0.5) / 4"}
{"task_id": "Mbpp/743", "completion": "def rotate_right(lst, n):\n    n = n % len(lst)\n    return lst[-n:] + lst[:-n]"}
{"task_id": "Mbpp/744", "completion": "def check_none(t):\n    return any(x is None for x in t)"}
{"task_id": "Mbpp/745", "completion": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        if all(int(digit) != 0 and num % int(digit) == 0 for digit in str(num)):\n            result.append(num)\n    return result"}
{"task_id": "Mbpp/748", "completion": "def capital_words_spaces(s):\n    result = \"\"\n    capitalize_next = True\n    for char in s:\n        if capitalize_next and char.isalpha():\n            result += char.upper()\n            capitalize_next = False\n        else:\n            result += char\n            if char == \" \":\n                capitalize_next = True\n    return result"}
{"task_id": "Mbpp/749", "completion": "def sort_numeric_strings(strings):\n    return sorted(strings, key=lambda x: int(x))"}
{"task_id": "Mbpp/750", "completion": "def add_tuple(lst, tup):\n    return lst + list(tup)"}
{"task_id": "Mbpp/751", "completion": "def check_min_heap(arr):\n    def is_min_heap(arr, i, n):\n        if i >= n:\n            return True\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[i] > arr[left]:\n            return False\n        if right < n and arr[i] > arr[right]:\n            return False\n        return is_min_heap(arr, left, n) and is_min_heap(arr, right, n)\n\n    return is_min_heap(arr, 0, len(arr))"}
{"task_id": "Mbpp/752", "completion": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * jacobsthal_num(n - 1) - jacobsthal_num(n - 2)"}
{"task_id": "Mbpp/753", "completion": "def min_k(lst, k):\n    return sorted(lst, key=lambda x: x[1])[:k]"}
{"task_id": "Mbpp/754", "completion": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"}
{"task_id": "Mbpp/755", "completion": "def second_smallest(nums):\n    # Initialize the smallest and second smallest numbers\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    # Iterate through the list\n    for num in nums:\n        # If the current number is smaller than the smallest number, update both variables\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        # If the current number is between the smallest and second smallest numbers, update only the second smallest\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n\n    # If there is no second smallest number, return None\n    if second_smallest == float('inf'):\n        return None\n    else:\n        return second_smallest"}
{"task_id": "Mbpp/757", "completion": "def count_reverse_pairs(str_list):\n    count = 0\n    for s in str_list:\n        if s == s[::-1]:\n            count += 1\n    return count"}
{"task_id": "Mbpp/758", "completion": "def unique_sublists(lst):\n    result = {}\n    for sublist in lst:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in result:\n            result[sublist_tuple] += 1\n        else:\n            result[sublist_tuple] = 1\n    return result"}
{"task_id": "Mbpp/759", "completion": "def is_decimal(s):\n    try:\n        float(s)\n        return True\n    except ValueError:\n        return False"}
{"task_id": "Mbpp/760", "completion": "def unique_Element(lst):\n    return len(set(lst)) == 1"}
{"task_id": "Mbpp/762", "completion": "def check_monthnumber_number(month_number):\n    \"\"\"\n    Checks if the given month number contains 30 days.\n\n    Args:\n    month_number (int): The number representing the month.\n\n    Returns:\n    bool: True if the month has 30 days, False otherwise.\n    \"\"\"\n    return month_number in [4, 6, 9, 11]"}
{"task_id": "Mbpp/763", "completion": "def find_min_diff(arr, n):\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"}
{"task_id": "Mbpp/764", "completion": "def number_ctr(s):\n    return sum(c.isdigit() for c in s)"}
{"task_id": "Mbpp/765", "completion": "def is_polite(n):\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2 * is_polite(n // 2)\n    else:\n        return 2 * is_polite(n // 2) + 1"}
{"task_id": "Mbpp/766", "completion": "def pair_wise(lst):\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]"}
{"task_id": "Mbpp/767", "completion": "def get_pairs_count(lst, sum):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == sum:\n                count += 1\n    return count"}
{"task_id": "Mbpp/769", "completion": "def Diff(list1, list2):\n    return [x for x in list1 if x not in list2]"}
{"task_id": "Mbpp/770", "completion": "def odd_num_sum(n):\n    return sum([i**4 for i in range(1, 2*n, 2)])"}
{"task_id": "Mbpp/771", "completion": "def check_expression(expression):\n    stack = []\n    opening_brackets = ['(', '[', '{']\n    closing_brackets = [')', ']', '}']\n    bracket_pairs = {')': '(', ']': '[', '}': '{'}\n\n    for char in expression:\n        if char in opening_brackets:\n            stack.append(char)\n        elif char in closing_brackets:\n            if not stack or stack.pop() != bracket_pairs[char]:\n                return False\n\n    return not stack"}
{"task_id": "Mbpp/772", "completion": "def remove_length(s, k):\n    words = s.split()\n    result = [word for word in words if len(word) != k]\n    return ' '.join(result)"}
{"task_id": "Mbpp/773", "completion": "def occurance_substring(s, sub):\n    if sub in s:\n        return (sub, s.index(sub), s.index(sub) + len(sub) - 1)\n    else:\n        return None"}
{"task_id": "Mbpp/775", "completion": "def odd_position(lst):\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/777", "completion": "def find_sum(lst):\n    return sum(set(lst))"}
{"task_id": "Mbpp/778", "completion": "def pack_consecutive_duplicates(lst):\n    packed_list = []\n    sublist = [lst[0]]\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i-1]:\n            sublist.append(lst[i])\n        else:\n            packed_list.append(sublist)\n            sublist = [lst[i]]\n    packed_list.append(sublist)\n    return packed_list"}
{"task_id": "Mbpp/780", "completion": "from itertools import combinations\n\ndef find_combinations(tuples):\n    result = []\n    for combo in combinations(tuples, 2):\n        result.append((combo[0][0] + combo[1][0], combo[0][1] + combo[1][1]))\n    return result"}
{"task_id": "Mbpp/781", "completion": "def count_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0"}
{"task_id": "Mbpp/782", "completion": "def odd_length_sum(arr):\n    total = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if j - i + 1 % 2 != 0:\n                total += arr[j]\n    return total"}
{"task_id": "Mbpp/784", "completion": "def mul_even_odd(lst):\n    even_num = 1\n    odd_num = 1\n    for num in lst:\n        if num % 2 == 0:\n            even_num *= num\n        else:\n            odd_num *= num\n    return even_num * odd_num"}
{"task_id": "Mbpp/785", "completion": "def tuple_str_int(s):\n    # Remove the parentheses and split the string by comma\n    str_list = s[1:-1].split(',')\n    # Convert each element to integer and create a tuple\n    int_tuple = tuple(map(int, str_list))\n    return int_tuple"}
{"task_id": "Mbpp/786", "completion": "def right_insertion(arr, val):\n    low, high = 0, len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == val:\n            return mid\n        elif arr[mid] < val:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return low"}
{"task_id": "Mbpp/787", "completion": "def text_match_three(s):\n    return s.startswith('abbb')"}
{"task_id": "Mbpp/788", "completion": "def new_tuple(lst, string):\n    return (lst[0], lst[1], string)"}
{"task_id": "Mbpp/790", "completion": "def even_position(lst):\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            return False\n    return True"}
{"task_id": "Mbpp/791", "completion": "def remove_nested(t):\n    result = []\n    for item in t:\n        if isinstance(item, tuple):\n            result.extend(remove_nested(item))\n        else:\n            result.append(item)\n    return tuple(result)"}
{"task_id": "Mbpp/792", "completion": "def count_list(lst):\n    return len(lst)"}
{"task_id": "Mbpp/793", "completion": "def last(arr, x):\n    \"\"\"\n    Find the last position of an element in a sorted array.\n    \"\"\"\n    low, high = 0, len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] < x:\n            low = mid + 1\n        elif arr[mid] > x:\n            high = mid - 1\n        else:\n            if mid == len(arr) - 1 or arr[mid + 1] != x:\n                return mid\n            else:\n                low = mid + 1\n    return -1"}
{"task_id": "Mbpp/794", "completion": "def text_starta_endb(s):\n    return s.startswith('a') and s.endswith('b')"}
{"task_id": "Mbpp/796", "completion": "def return_sum(dictionary):\n    return sum(dictionary.values())"}
{"task_id": "Mbpp/797", "completion": "def sum_in_range(l, r):\n    return sum(i for i in range(l, r+1) if i % 2 != 0)"}
{"task_id": "Mbpp/798", "completion": "def _sum(arr):\n    return sum(arr)"}
{"task_id": "Mbpp/799", "completion": "def left_rotate(n, d):\n    return (n << d) | (n >> (32 - d))"}
{"task_id": "Mbpp/800", "completion": "def remove_all_spaces(s):\n    return s.replace(\" \", \"\")"}
{"task_id": "Mbpp/801", "completion": "def test_three_equal(a, b, c):\n    count = 0\n    if a == b == c:\n        count = 3\n    elif a == b or a == c or b == c:\n        count = 2\n    return count"}
{"task_id": "Mbpp/803", "completion": "def is_perfect_square(n):\n    if n < 0:\n        return False\n    low, high = 0, n\n    while low <= high:\n        mid = (low + high) // 2\n        square = mid * mid\n        if square == n:\n            return True\n        elif square < n:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return False"}
{"task_id": "Mbpp/804", "completion": "def is_product_even(lst):\n    product = 1\n    for num in lst:\n        product *= num\n    return product % 2 == 0"}
{"task_id": "Mbpp/805", "completion": "def max_sum_list(lst):\n    max_sum = float('-inf')\n    max_lst = None\n    for l in lst:\n        curr_sum = sum(l)\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            max_lst = l\n    return max_lst"}
{"task_id": "Mbpp/806", "completion": "def max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n\n    for i in range(len(s)):\n        if s[i].isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n\n    return max_run"}
{"task_id": "Mbpp/807", "completion": "def first_odd(numbers):\n    for num in numbers:\n        if num % 2 != 0:\n            return num\n    return None"}
{"task_id": "Mbpp/808", "completion": "def check_K(tup, k):\n    return k in tup"}
{"task_id": "Mbpp/809", "completion": "def check_smaller(tup1, tup2):\n    for i in range(len(tup1)):\n        if tup1[i] >= tup2[i]:\n            return False\n    return True"}
