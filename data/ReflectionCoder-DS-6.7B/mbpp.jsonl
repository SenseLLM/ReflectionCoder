{"task_id": "Mbpp/2", "completion": "def similar_elements(list1, list2):\n    return set(list1) & set(list2)"}
{"task_id": "Mbpp/3", "completion": "def is_not_prime(n):\n    if n <= 1:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False"}
{"task_id": "Mbpp/4", "completion": "import heapq\n\ndef heap_queue_largest(numbers, n):\n    return heapq.nlargest(n, numbers)"}
{"task_id": "Mbpp/6", "completion": "def differ_At_One_Bit_Pos(x, y):\n    return bin(x ^ y).count('1') == 1"}
{"task_id": "Mbpp/7", "completion": "def find_char_long(s):\n    return [word for word in s.split() if len(word) >= 4]"}
{"task_id": "Mbpp/8", "completion": "def square_nums(nums):\n    return [num**2 for num in nums]"}
{"task_id": "Mbpp/9", "completion": "def find_Rotations(s):\n    n = len(s)\n    temp = s + s\n    for i in range(1, n):\n        if temp[i:i+n] == s:\n            return i\n    return n"}
{"task_id": "Mbpp/11", "completion": "def remove_Occ(string, char):\n    first_index = string.find(char)\n    last_index = string.rfind(char)\n    if first_index != -1 and last_index != -1:\n        return string[:first_index] + string[first_index+1:last_index] + string[last_index+1:]\n    return string"}
{"task_id": "Mbpp/12", "completion": "def sort_matrix(matrix):\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in matrix]\n    \n    # Create a list of tuples containing the row sums and their corresponding rows\n    rows_with_sums = [(row_sum, row) for row_sum, row in zip(row_sums, matrix)]\n    \n    # Sort the rows by their row sums\n    sorted_rows = sorted(rows_with_sums)\n    \n    # Extract the sorted rows from the sorted list of tuples\n    sorted_matrix = [row for _, row in sorted_rows]\n    \n    return sorted_matrix"}
{"task_id": "Mbpp/14", "completion": "def find_Volume(base, height, slant_height):\n    return (1/2) * base * height * slant_height"}
{"task_id": "Mbpp/16", "completion": "def text_lowercase_underscore(s):\n    parts = s.split('_')\n    for part in parts:\n        if not part.islower():\n            return False\n    return True"}
{"task_id": "Mbpp/17", "completion": "def square_perimeter(side_length):\n    return 4 * side_length"}
{"task_id": "Mbpp/18", "completion": "def remove_dirty_chars(str1, str2):\n    return ''.join([char for char in str1 if char not in str2])"}
{"task_id": "Mbpp/19", "completion": "def test_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "Mbpp/20", "completion": "def is_woodall(n):\n    \"\"\"\n    Check if the given number is woodball or not.\n    \"\"\"\n    # Convert the number to a string\n    num_str = str(n)\n\n    # Check if the number is divisible by 3\n    if n % 3 == 0:\n        # Check if the number is divisible by 5\n        if n % 5 == 0:\n            # Check if the number is divisible by 7\n            if n % 7 == 0:\n                # Check if the number is divisible by 11\n                if n % 11 == 0:\n                    # Check if the number is divisible by 13\n                    if n % 13 == 0:\n                        return True\n    return False"}
{"task_id": "Mbpp/56", "completion": "def check(num):\n    # Reverse the number\n    reverse_num = int(str(num)[::-1])\n    \n    # Check if the number is one less than twice its reverse\n    if num == (2 * reverse_num) - 1:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/57", "completion": "def find_Max_Num(digits):\n    # Sort the digits in descending order\n    digits.sort(reverse=True)\n    \n    # Join the digits to form the largest number\n    max_num = int(\"\".join(map(str, digits)))\n    \n    return max_num"}
{"task_id": "Mbpp/58", "completion": "def opposite_Signs(x, y):\n    return (x ^ y) < 0"}
{"task_id": "Mbpp/59", "completion": "def is_octagonal(n):\n    return n*(3*n-2)"}
{"task_id": "Mbpp/61", "completion": "def count_Substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            if sum(int(digit) for digit in substring) == len(substring):\n                count += 1\n    return count"}
{"task_id": "Mbpp/62", "completion": "def smallest_num(lst):\n    return min(lst)"}
{"task_id": "Mbpp/63", "completion": "def max_difference(tuples):\n    max_diff = 0\n    for i in range(len(tuples)):\n        for j in range(i+1, len(tuples)):\n            diff = abs(tuples[i][0] - tuples[j][0]) + abs(tuples[i][1] - tuples[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"}
{"task_id": "Mbpp/64", "completion": "def subject_marks(lst):\n    return sorted(lst, key=lambda x: x[1])"}
{"task_id": "Mbpp/65", "completion": "def recursive_list_sum(lst):\n    total = 0\n    for element in lst:\n        if type(element) == list:\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total"}
{"task_id": "Mbpp/66", "completion": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"}
{"task_id": "Mbpp/67", "completion": "def bell_number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]"}
{"task_id": "Mbpp/68", "completion": "def is_Monotonic(arr):\n    if len(arr) < 2:\n        return True\n    else:\n        increasing = decreasing = True\n        for i in range(len(arr) - 1):\n            if arr[i] > arr[i + 1]:\n                increasing = False\n            if arr[i] < arr[i + 1]:\n                decreasing = False\n        return increasing or decreasing"}
{"task_id": "Mbpp/69", "completion": "def is_sublist(lst, sub):\n    sub_len = len(sub)\n    for i in range(len(lst) - sub_len + 1):\n        if lst[i:i + sub_len] == sub:\n            return True\n    return False"}
{"task_id": "Mbpp/70", "completion": "def get_equal(tuples):\n    length = len(tuples[0])\n    for tup in tuples:\n        if len(tup) != length:\n            return False\n    return True"}
{"task_id": "Mbpp/71", "completion": "def comb_sort(lst):\n    gap = len(lst)\n    shrink_factor = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink_factor)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n\n        i = 0\n        while i + gap < len(lst):\n            if lst[i] > lst[i + gap]:\n                lst[i], lst[i + gap] = lst[i + gap], lst[i]\n                sorted = False\n            i += 1\n\n    return lst"}
{"task_id": "Mbpp/72", "completion": "def dif_Square(n):\n    for i in range(n):\n        for j in range(n):\n            if i*i - j*j == n:\n                return True\n    return False"}
{"task_id": "Mbpp/74", "completion": "def is_samepatterns(colors, patterns):\n    return all(colors[i] == colors[i+1] for i in range(len(colors)-1)) and all(patterns[i] == patterns[i+1] for i in range(len(patterns)-1))"}
{"task_id": "Mbpp/75", "completion": "def find_tuples(tuples_list, k):\n    result = []\n    for tup in tuples_list:\n        if all(i % k == 0 for i in tup):\n            result.append(tup)\n    return result"}
{"task_id": "Mbpp/77", "completion": "def is_Diff(num):\n    return num % 11 == 0"}
{"task_id": "Mbpp/79", "completion": "def word_len(word):\n    return len(word) % 2 != 0"}
{"task_id": "Mbpp/80", "completion": "def tetrahedral_number(n):\n    return n * (n + 1) * (n + 2) // 6"}
{"task_id": "Mbpp/82", "completion": "import math\n\ndef volume_sphere(radius):\n    return (4/3) * math.pi * radius**3"}
{"task_id": "Mbpp/84", "completion": "def sequence(n):\n    if n == 1 or n == 2:\n        return 1\n    else:\n        seq = [1, 1]\n        for i in range(2, n):\n            seq.append(seq[seq[i-1]-1] + seq[i-seq[i-1]])\n        return seq[n-1]"}
{"task_id": "Mbpp/85", "completion": "import math\n\ndef surfacearea_sphere(radius):\n    return 4 * math.pi * radius ** 2"}
{"task_id": "Mbpp/86", "completion": "def centered_hexagonal_number(n):\n    return n * (2 * n - 1)"}
{"task_id": "Mbpp/87", "completion": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    for d in [dict1, dict2, dict3]:\n        merged_dict.update(d)\n    return merged_dict"}
{"task_id": "Mbpp/88", "completion": "def freq_count(lst):\n    freq_dict = {}\n    for i in lst:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict"}
{"task_id": "Mbpp/89", "completion": "def closest_num(n):\n    return n - 1"}
{"task_id": "Mbpp/90", "completion": "def len_log(words):\n    return max(len(word) for word in words)"}
{"task_id": "Mbpp/91", "completion": "def find_substring(lst, sub):\n    for string in lst:\n        if sub in string:\n            return True\n    return False"}
{"task_id": "Mbpp/92", "completion": "def is_undulating(n):\n    n = str(n)\n    for i in range(len(n) - 2):\n        if n[i] == n[i+1] or n[i+1] == n[i+2]:\n            return False\n    return True"}
{"task_id": "Mbpp/93", "completion": "def power(a, b):\n    return a ** b"}
{"task_id": "Mbpp/94", "completion": "def index_minimum(lst):\n    return min(lst, key=lambda x: x[1])[0]"}
{"task_id": "Mbpp/95", "completion": "def Find_Min_Length(lst):\n    return min(len(sublist) for sublist in lst)"}
{"task_id": "Mbpp/96", "completion": "def divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"}
{"task_id": "Mbpp/97", "completion": "def frequency_lists(lst):\n    freq_dict = {}\n    for sublist in lst:\n        for item in sublist:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"}
{"task_id": "Mbpp/98", "completion": "import math\n\ndef multiply_num(lst):\n    product = 1\n    for num in lst:\n        product *= num\n    return product / len(lst)"}
{"task_id": "Mbpp/99", "completion": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary"}
{"task_id": "Mbpp/100", "completion": "def next_smallest_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    def reverse(num):\n        return int(str(num)[::-1])\n\n    n += 1\n    while not is_palindrome(n):\n        n += 1\n    return n"}
{"task_id": "Mbpp/101", "completion": "def kth_element(arr, k):\n    return arr[k-1]"}
{"task_id": "Mbpp/102", "completion": "def snake_to_camel(snake_str):\n    components = snake_str.split('_')\n    return components[0] + ''.join(x.title() for x in components[1:])"}
{"task_id": "Mbpp/103", "completion": "def eulerian_num(n, m):\n    if m == 0 or m > n:\n        return 0\n    if n == 0:\n        return 1\n    return eulerian_num(n-1, m) + eulerian_num(n, m-1)"}
{"task_id": "Mbpp/104", "completion": "def sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]"}
{"task_id": "Mbpp/105", "completion": "def count(lst):\n    return sum(1 for x in lst if x)"}
{"task_id": "Mbpp/106", "completion": "def add_lists(lst, tup):\n    return tup + tuple(lst)"}
{"task_id": "Mbpp/108", "completion": "def merge_sorted_list(list1, list2, list3):\n    merged_list = list1 + list2 + list3\n    merged_list.sort()\n    return merged_list"}
{"task_id": "Mbpp/109", "completion": "def odd_Equivalent(s, n):\n    count = 0\n    for i in range(n):\n        s = s[1:] + s[0]\n        if int(s, 2) % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "Mbpp/111", "completion": "def common_in_nested_lists(nested_lists):\n    common_elements = set(nested_lists[0])\n    for lst in nested_lists[1:]:\n        common_elements = common_elements.intersection(set(lst))\n    return list(common_elements)"}
{"task_id": "Mbpp/113", "completion": "def check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False"}
{"task_id": "Mbpp/116", "completion": "def tuple_to_int(t):\n    return int(''.join(map(str, t)))"}
{"task_id": "Mbpp/118", "completion": "def string_to_list(s):\n    return s.split()"}
{"task_id": "Mbpp/119", "completion": "def search(nums):\n    low, high = 0, len(nums) - 1\n    while low < high:\n        mid = (low + high) // 2\n        if nums[mid] == nums[mid ^ 1]:\n            low = mid + 1\n        else:\n            high = mid\n    return nums[low]"}
{"task_id": "Mbpp/120", "completion": "def max_product_tuple(lst):\n    max_product = 0\n    for tup1 in lst:\n        for tup2 in lst:\n            if tup1 != tup2:\n                product = abs(tup1[0]*tup1[1]*tup2[0]*tup2[1])\n                if product > max_product:\n                    max_product = product\n    return max_product"}
{"task_id": "Mbpp/123", "completion": "def amicable_numbers_sum(n):\n    def sum_of_divisors(num):\n        sum = 1\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                sum += i\n                if i != num // i:\n                    sum += num // i\n        return sum\n\n    amicable_sum = 0\n    for i in range(2, n + 1):\n        sum_i = sum_of_divisors(i)\n        if sum_i > i and sum_of_divisors(sum_i) == i:\n            amicable_sum += i\n    return amicable_sum"}
{"task_id": "Mbpp/124", "completion": "import math\n\ndef angle_complex(z):\n    return math.atan2(z.imag, z.real)"}
{"task_id": "Mbpp/125", "completion": "def find_length(s):\n    max_diff = 0\n    count = 0\n    for char in s:\n        if char == '0':\n            count -= 1\n        else:\n            count += 1\n        max_diff = max(max_diff, count)\n    return max_diff"}
{"task_id": "Mbpp/126", "completion": "def sum_common_divisors(a, b):\n    common_divisors = set()\n    for i in range(1, a+1):\n        if a % i == 0:\n            common_divisors.add(i)\n    for i in range(1, b+1):\n        if b % i == 0:\n            common_divisors.add(i)\n    return sum(common_divisors)"}
{"task_id": "Mbpp/127", "completion": "def multiply_int(x, y):\n    return x * y"}
{"task_id": "Mbpp/128", "completion": "def long_words(n, sentence):\n    words = sentence.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words"}
{"task_id": "Mbpp/129", "completion": "def magic_square_test(matrix):\n    # calculate the sum of the first row\n    sum_row = sum(matrix[0])\n\n    # calculate the sum of each column\n    sum_col = [sum(col) for col in zip(*matrix)]\n\n    # calculate the sum of the two diagonals\n    sum_diag1 = sum(matrix[i][i] for i in range(len(matrix)))\n    sum_diag2 = sum(matrix[i][len(matrix)-i-1] for i in range(len(matrix)))\n\n    # check if all sums are equal\n    if sum_row == sum_col[0] == sum_col[1] == sum_col[2] == sum_diag1 == sum_diag2:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/130", "completion": "def max_occurrences(lst):\n    freq = {}\n    for item in lst:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    max_freq = max(freq.values())\n    for item, count in freq.items():\n        if count == max_freq:\n            return item"}
{"task_id": "Mbpp/131", "completion": "def reverse_vowels(s):\n    vowels = \"aeiouAEIOU\"\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n        else:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n    return ''.join(s)"}
{"task_id": "Mbpp/132", "completion": "def tup_string(tup):\n    return ''.join(tup)"}
{"task_id": "Mbpp/133", "completion": "def sum_negativenum(numbers):\n    return sum([num for num in numbers if num < 0])"}
{"task_id": "Mbpp/135", "completion": "def hexagonal_num(n):\n    return n*(2*n-1)"}
{"task_id": "Mbpp/137", "completion": "def zero_count(arr):\n    zero_count = arr.count(0)\n    non_zero_count = len(arr) - zero_count\n    return zero_count / non_zero_count"}
{"task_id": "Mbpp/138", "completion": "def is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return False\n    while n != 0:\n        if n % 2 == 1:\n            n -= 1\n        else:\n            n /= 2\n    return True"}
{"task_id": "Mbpp/139", "completion": "import math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius"}
{"task_id": "Mbpp/140", "completion": "def extract_singly(lst):\n    return [item for sublist in lst for item in sublist]"}
{"task_id": "Mbpp/141", "completion": "def pancake_sort(lst):\n    for i in range(len(lst)):\n        max_index = i\n        for j in range(i+1, len(lst)):\n            if lst[j] > lst[max_index]:\n                max_index = j\n        lst[i], lst[max_index] = lst[max_index], lst[i]\n    return lst"}
{"task_id": "Mbpp/142", "completion": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"}
{"task_id": "Mbpp/145", "completion": "def max_Abs_Diff(arr):\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"}
{"task_id": "Mbpp/160", "completion": "def find_solution(a, b, n):\n    for x in range(n+1):\n        for y in range(n+1):\n            if a*x + b*y == n:\n                return (x, y)\n    return None"}
{"task_id": "Mbpp/161", "completion": "def remove_elements(lst, elements):\n    return [x for x in lst if x not in elements]"}
{"task_id": "Mbpp/162", "completion": "def sum_series(n):\n    total = 0\n    for i in range(0, n // 2 + 1):\n        total += n - 2 * i\n    return total"}
{"task_id": "Mbpp/165", "completion": "def count_char_position(s):\n    return sum(1 for i in range(len(s)) if s[i].lower() == chr(97 + i))"}
{"task_id": "Mbpp/166", "completion": "def find_even_pair(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if (lst[i] ^ lst[j]) % 2 == 0:\n                count += 1\n    return count"}
{"task_id": "Mbpp/167", "completion": "def next_power_of_2(n):\n    if n == 0:\n        return 1\n    else:\n        return 2 ** (n - 1).bit_length()"}
{"task_id": "Mbpp/168", "completion": "def frequency(lst, num):\n    return lst.count(num)"}
{"task_id": "Mbpp/170", "completion": "def sum_range_list(lst, start, end):\n    return sum(lst[start:end+1])"}
{"task_id": "Mbpp/171", "completion": "def perimeter_pentagon(side_length):\n    return 5 * side_length"}
{"task_id": "Mbpp/172", "completion": "def count_occurance(s):\n    return s.count('std')"}
{"task_id": "Mbpp/222", "completion": "def check_type(t):\n    return all(type(t[0]) == type(i) for i in t)"}
{"task_id": "Mbpp/223", "completion": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n // 2"}
{"task_id": "Mbpp/224", "completion": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"}
{"task_id": "Mbpp/226", "completion": "def odd_values_string(s):\n    return s[::2]"}
{"task_id": "Mbpp/227", "completion": "def min_of_three(a, b, c):\n    return min(a, b, c)"}
{"task_id": "Mbpp/230", "completion": "def replace_blank(string, char):\n    return string.replace(' ', char)"}
{"task_id": "Mbpp/232", "completion": "def larg_nnum(lst, n):\n    lst.sort(reverse=True)\n    return lst[:n]"}
{"task_id": "Mbpp/233", "completion": "import math\n\ndef lateralsuface_cylinder(r, h):\n    return 2 * math.pi * r * h"}
{"task_id": "Mbpp/234", "completion": "def volume_cube(side_length):\n    return side_length ** 3"}
{"task_id": "Mbpp/235", "completion": "def even_bit_set_number(n):\n    return n | 0b10101010101010101010101010101010"}
{"task_id": "Mbpp/237", "completion": "def check_occurences(lst):\n    result = {}\n    for tup in lst:\n        if tup in result:\n            result[tup] += 1\n        else:\n            result[tup] = 1\n    return result"}
{"task_id": "Mbpp/238", "completion": "def number_of_substrings(s):\n    n = len(s)\n    return n * (n + 1) // 2"}
{"task_id": "Mbpp/239", "completion": "def get_total_number_of_sequences(m, n):\n    # Initialize a list to store the number of sequences for each element\n    sequences = [1] * (m + 1)\n\n    # Iterate through each element from 2 to m\n    for i in range(2, m + 1):\n        # Calculate the number of sequences for the current element\n        sequences[i] = sum(sequences[i // 2:i])\n\n    # Return the number of sequences for the last element\n    return sequences[m]"}
{"task_id": "Mbpp/240", "completion": "def replace_list(list1, list2):\n    list1[-1:] = list2\n    return list1"}
{"task_id": "Mbpp/242", "completion": "def count_charac(string):\n    return len(string)"}
{"task_id": "Mbpp/244", "completion": "def next_Perfect_Square(n):\n    root = int(n**0.5)\n    if root*root == n:\n        return (root+1)**2\n    else:\n        return (root+1)**2"}
{"task_id": "Mbpp/245", "completion": "def max_sum(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    # Initialize the arrays to store the maximum sum of increasing and decreasing subsequences\n    inc = [0] * n\n    dec = [0] * n\n\n    # Initialize the maximum sum of a bitonic subsequence\n    max_sum = 0\n\n    # Calculate the maximum sum of increasing subsequences\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j] and inc[i] < inc[j] + arr[i]:\n                inc[i] = inc[j] + arr[i]\n\n    # Calculate the maximum sum of decreasing subsequences\n    for i in range(n - 1, -1, -1):\n        dec[i] = arr[i]\n        for j in range(n - 1, i, -1):\n            if arr[i] > arr[j] and dec[i] < dec[j] + arr[i]:\n                dec[i] = dec[j] + arr[i]\n\n    # Calculate the maximum sum of a bitonic subsequence\n    for i in range(n):\n        max_sum = max(max_sum, inc[i] + dec[i] - arr[i])\n\n    return max_sum"}
{"task_id": "Mbpp/247", "completion": "def lps(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n - 1, -1, -1):\n        dp[i][i] = 1\n        for j in range(i + 1, n):\n            if s[i] == s[j]:\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\n    return dp[0][n - 1]"}
{"task_id": "Mbpp/250", "completion": "def count_X(tup, element):\n    return tup.count(element)"}
{"task_id": "Mbpp/251", "completion": "def insert_element(lst, element):\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result"}
{"task_id": "Mbpp/252", "completion": "import cmath\n\ndef convert(complex_num):\n    return cmath.polar(complex_num)"}
{"task_id": "Mbpp/253", "completion": "def count_integer(lst):\n    return sum(1 for x in lst if isinstance(x, int))"}
{"task_id": "Mbpp/255", "completion": "from itertools import product\n\ndef combinations_colors(lst, n):\n    return [tuple(p) for p in product(lst, repeat=n)]"}
{"task_id": "Mbpp/256", "completion": "def count_Primes_nums(n):\n    if n < 2:\n        return 0\n    primes = [True] * n\n    primes[0] = primes[1] = False\n    for i in range(2, int(n**0.5) + 1):\n        if primes[i]:\n            primes[i*i:n:i] = [False] * len(primes[i*i:n:i])\n    return sum(primes)"}
{"task_id": "Mbpp/257", "completion": "def swap_numbers(a, b):\n    return (b, a)"}
{"task_id": "Mbpp/259", "completion": "def maximize_elements(t1, t2):\n    # Initialize an empty list to store the maximized tuples\n    maximized_tuples = []\n\n    # Iterate over the tuples in both t1 and t2\n    for tuple1, tuple2 in zip(t1, t2):\n        # Find the maximum element in each tuple\n        max_element = max(tuple1[0], tuple2[0]), max(tuple1[1], tuple2[1])\n        # Append the maximized tuple to the list\n        maximized_tuples.append(max_element)\n\n    return tuple(maximized_tuples)"}
{"task_id": "Mbpp/260", "completion": "def newman_prime(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    num = 2\n    while count < n:\n        if is_prime(num):\n            count += 1\n        num += 1\n    return num - 1"}
{"task_id": "Mbpp/261", "completion": "def division_elements(t1, t2):\n    return tuple(a // b for a, b in zip(t1, t2))"}
{"task_id": "Mbpp/262", "completion": "def split_two_parts(lst, L):\n    return lst[:L], lst[L:]"}
{"task_id": "Mbpp/264", "completion": "def dog_age(age):\n    return age * 7"}
{"task_id": "Mbpp/265", "completion": "def list_split(lst, n):\n    return [lst[i:i+n] for i in range(0, len(lst), n)]"}
{"task_id": "Mbpp/266", "completion": "def lateralsurface_cube(side_length):\n    return 4 * side_length ** 2"}
{"task_id": "Mbpp/267", "completion": "def square_Sum(n):\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**2\n    return sum"}
{"task_id": "Mbpp/268", "completion": "def find_star_num(n):\n    return n * (n + 1) // 2"}
{"task_id": "Mbpp/269", "completion": "def ascii_value(char):\n    return ord(char)"}
{"task_id": "Mbpp/270", "completion": "def sum_even_and_even_index(lst):\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 == 0)"}
{"task_id": "Mbpp/271", "completion": "def even_Power_Sum(n):\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i**5\n    return sum"}
{"task_id": "Mbpp/272", "completion": "def rear_extract(lst):\n    return [tup[-1] for tup in lst]"}
{"task_id": "Mbpp/273", "completion": "def substract_elements(t1, t2):\n    return tuple(a - b for a, b in zip(t1, t2))"}
{"task_id": "Mbpp/274", "completion": "def even_binomial_Coeff_Sum(n):\n    # Initialize sum\n    sum = 0\n\n    # Iterate through even indexed binomial coefficients\n    for i in range(0, n+1, 2):\n        # Calculate binomial coefficient\n        coeff = 1\n        for j in range(i+1):\n            coeff *= (n-j)\n            coeff //= (j+1)\n\n        # Add to sum\n        sum += coeff\n\n    return sum"}
{"task_id": "Mbpp/276", "completion": "import math\n\ndef volume_cylinder(radius, height):\n    return math.pi * radius**2 * height"}
{"task_id": "Mbpp/277", "completion": "def dict_filter(d, n):\n    return {k: v for k, v in d.items() if v >= n}"}
{"task_id": "Mbpp/278", "completion": "def count_first_elements(tup):\n    count = 0\n    for i in tup:\n        if isinstance(i, tuple):\n            break\n        count += 1\n    return count"}
{"task_id": "Mbpp/279", "completion": "def is_num_decagonal(n):\n    return n*(3*n-2)"}
{"task_id": "Mbpp/280", "completion": "def sequential_search(array, element):\n    for i in range(len(array)):\n        if array[i] == element:\n            return (True, i)\n    return (False, -1)"}
{"task_id": "Mbpp/281", "completion": "def all_unique(lst):\n    return len(lst) == len(set(lst))"}
{"task_id": "Mbpp/282", "completion": "def sub_list(list1, list2):\n    return [x - y for x, y in zip(list1, list2)]"}
{"task_id": "Mbpp/283", "completion": "def validate(n):\n    n = str(n)\n    for digit in n:\n        if n.count(digit) > int(digit):\n            return False\n    return True"}
{"task_id": "Mbpp/284", "completion": "def check_element(lst, element):\n    return all(item == element for item in lst)"}
{"task_id": "Mbpp/285", "completion": "def text_match_two_three(s):\n    if len(s) < 3:\n        return False\n    if s[0] == 'a' and s[1] == 'b' and (s[2] == 'b' or s[2] == 'b'):\n        return True\n    return False"}
{"task_id": "Mbpp/286", "completion": "def max_sub_array_sum_repeated(arr, k, n):\n    max_sum = float('-inf')\n    for i in range(n):\n        curr_sum = 0\n        for j in range(i, n*k):\n            curr_sum += arr[j % n]\n            max_sum = max(max_sum, curr_sum)\n    return max_sum"}
{"task_id": "Mbpp/287", "completion": "def square_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i*2*i\n    return sum"}
{"task_id": "Mbpp/290", "completion": "def max_length(lst):\n    max_len = 0\n    max_lst = []\n    for sublist in lst:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            max_lst = sublist\n    return max_len, max_lst"}
{"task_id": "Mbpp/292", "completion": "def find(a, b):\n    return a // b"}
{"task_id": "Mbpp/293", "completion": "import math\n\ndef otherside_rightangle(a, b):\n    return math.sqrt(a**2 + b**2)"}
{"task_id": "Mbpp/294", "completion": "def max_val(lst):\n    max_val = None\n    for i in lst:\n        if isinstance(i, (int, float)):\n            if max_val is None or i > max_val:\n                max_val = i\n    return max_val"}
{"task_id": "Mbpp/296", "completion": "def get_Inv_Count(arr):\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count"}
{"task_id": "Mbpp/297", "completion": "def flatten_list(nested_list):\n    flat_list = []\n    for i in nested_list:\n        if isinstance(i, list):\n            flat_list.extend(flatten_list(i))\n        else:\n            flat_list.append(i)\n    return flat_list"}
{"task_id": "Mbpp/299", "completion": "def max_aggregate(lst):\n    aggregate_dict = {}\n    for name, score in lst:\n        if name in aggregate_dict:\n            aggregate_dict[name] += score\n        else:\n            aggregate_dict[name] = score\n    max_name = max(aggregate_dict, key=aggregate_dict.get)\n    return (max_name, aggregate_dict[max_name])"}
{"task_id": "Mbpp/300", "completion": "import math\n\ndef count_binary_seq(n):\n    # The total number of binary sequences of length 2n is 2^n\n    total_seq = 2 ** n\n\n    # The number of binary sequences where the sum of the first n bits is equal to the sum of the last n bits\n    # is equal to the number of ways we can choose n out of 2n bits, which is equal to 2n choose n\n    matching_seq = 2 ** n\n\n    # The probability of a binary sequence where the sum of the first n bits is equal to the sum of the last n bits\n    # is equal to the number of matching sequences divided by the total number of sequences\n    prob = matching_seq / total_seq\n\n    return prob"}
{"task_id": "Mbpp/301", "completion": "def dict_depth(d):\n    if not isinstance(d, dict):\n        return 0\n    else:\n        return 1 + max(dict_depth(v) for v in d.values())"}
{"task_id": "Mbpp/305", "completion": "def start_withp(words):\n    for word in words:\n        if word.startswith('P'):\n            return word.split()[0], word.split()[1]\n    return None"}
{"task_id": "Mbpp/306", "completion": "def max_sum_increasing_subseq(arr, n, i, k):\n    max_sum = 0\n    for j in range(i):\n        if arr[j] < arr[i] and arr[j] < arr[k]:\n            max_sum = max(max_sum, arr[j])\n    return max_sum"}
{"task_id": "Mbpp/308", "completion": "def large_product(list1, list2, n):\n    products = [i * j for i in list1 for j in list2]\n    products.sort(reverse=True)\n    return products[:n]"}
{"task_id": "Mbpp/309", "completion": "def maximum(a, b):\n    if a > b:\n        return a\n    else:\n        return b"}
{"task_id": "Mbpp/310", "completion": "def string_to_tuple(s):\n    return tuple(s)"}
{"task_id": "Mbpp/311", "completion": "def set_left_most_unset_bit(n):\n    return n | (n + 1)"}
{"task_id": "Mbpp/312", "completion": "import math\n\ndef volume_cone(radius, height):\n    return (1/3) * math.pi * radius**2 * height"}
{"task_id": "Mbpp/388", "completion": "def highest_Power_of_2(n):\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2"}
{"task_id": "Mbpp/389", "completion": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        lucas_nums = [2, 1]\n        for i in range(2, n + 1):\n            lucas_nums.append(lucas_nums[i - 1] + lucas_nums[i - 2])\n        return lucas_nums[n]"}
{"task_id": "Mbpp/390", "completion": "def add_string(lst, format_str):\n    return [format_str.format(x) for x in lst]"}
{"task_id": "Mbpp/391", "completion": "def convert_list_dictionary(keys, names, values):\n    result = []\n    for i in range(len(keys)):\n        inner_dict = {names[i]: values[i]}\n        outer_dict = {keys[i]: inner_dict}\n        result.append(outer_dict)\n    return result"}
{"task_id": "Mbpp/392", "completion": "def get_max_sum(n):\n    if n == 0:\n        return 0\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"}
{"task_id": "Mbpp/394", "completion": "def check_distinct(t):\n    return len(t) == len(set(t))"}
{"task_id": "Mbpp/395", "completion": "def first_non_repeating_character(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    return None"}
{"task_id": "Mbpp/397", "completion": "def median_numbers(a, b, c):\n    numbers = [a, b, c]\n    numbers.sort()\n    return numbers[1]"}
{"task_id": "Mbpp/398", "completion": "def sum_of_digits(lst):\n    return sum(sum(int(digit) for digit in str(num)) for num in lst)"}
{"task_id": "Mbpp/404", "completion": "def minimum(a, b):\n    if a < b:\n        return a\n    else:\n        return b"}
{"task_id": "Mbpp/405", "completion": "def check_tuplex(tuplex, element):\n    return element in tuplex"}
{"task_id": "Mbpp/406", "completion": "def find_Parity(num):\n    return num % 2 != 0"}
{"task_id": "Mbpp/409", "completion": "def min_product_tuple(lst):\n    min_product = float('inf')\n    for tup in lst:\n        product = tup[0] * tup[1]\n        if product < min_product:\n            min_product = product\n    return min_product"}
{"task_id": "Mbpp/410", "completion": "def min_val(lst):\n    min_val = lst[0]\n    for i in lst:\n        if type(i) == int and i < min_val:\n            min_val = i\n    return min_val"}
{"task_id": "Mbpp/412", "completion": "def remove_odd(lst):\n    return [x for x in lst if x % 2 == 0]"}
{"task_id": "Mbpp/413", "completion": "def extract_nth_element(lst, n):\n    return [x[n] for x in lst]"}
{"task_id": "Mbpp/414", "completion": "def overlapping(seq1, seq2):\n    for value in seq1:\n        if value in seq2:\n            return True\n    return False"}
{"task_id": "Mbpp/415", "completion": "def max_Product(arr):\n    max_product = 0\n    result = ()\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i]*arr[j] > max_product:\n                max_product = arr[i]*arr[j]\n                result = (arr[i], arr[j])\n    return result"}
{"task_id": "Mbpp/418", "completion": "def Find_Max(lst):\n    max_len = max(len(sublist) for sublist in lst)\n    for sublist in lst:\n        if len(sublist) == max_len:\n            return sublist"}
{"task_id": "Mbpp/419", "completion": "def round_and_sum(numbers):\n    # Round every number in the list\n    rounded_numbers = [round(num) for num in numbers]\n    \n    # Calculate the sum of the rounded numbers\n    total_sum = sum(rounded_numbers)\n    \n    # Multiply the total sum by the length of the list\n    result = total_sum * len(numbers)\n    \n    return result"}
{"task_id": "Mbpp/420", "completion": "def cube_Sum(n):\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i**3\n    return sum"}
{"task_id": "Mbpp/421", "completion": "def concatenate_tuple(tup):\n    return '-'.join(str(x) for x in tup)"}
{"task_id": "Mbpp/422", "completion": "def find_Average_Of_Cube(n):\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    average = sum_of_cubes / n\n    return average"}
{"task_id": "Mbpp/424", "completion": "def extract_rear(tup):\n    return [s[-1] for s in tup]"}
{"task_id": "Mbpp/425", "completion": "def count_element_in_list(lst, element):\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count"}
{"task_id": "Mbpp/426", "completion": "def filter_oddnumbers(numbers):\n    return [num for num in numbers if num % 2 != 0]"}
{"task_id": "Mbpp/427", "completion": "def change_date_format(date):\n    year, month, day = date.split('-')\n    return f'{day}-{month}-{year}'"}
{"task_id": "Mbpp/428", "completion": "def shell_sort(arr):\n    gap = len(arr) // 2\n    while gap > 0:\n        for i in range(gap, len(arr)):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr"}
{"task_id": "Mbpp/429", "completion": "def and_tuples(t1, t2):\n    return tuple(a & b for a, b in zip(t1, t2))"}
{"task_id": "Mbpp/430", "completion": "def parabola_directrix(a, b, c):\n    return -b/(2*a)"}
{"task_id": "Mbpp/432", "completion": "def median_trapezium(a, b, c):\n    \"\"\"\n    Find the median length of a trapezium.\n\n    :param a: length of the parallel sides of the trapezium\n    :param b: length of the other parallel side of the trapezium\n    :param c: height of the trapezium\n    :return: median length of the trapezium\n    \"\"\"\n    return (a + b) / 2 * c"}
{"task_id": "Mbpp/433", "completion": "def check_greater(arr, num):\n    for i in arr:\n        if i <= num:\n            return False\n    return True"}
{"task_id": "Mbpp/435", "completion": "def last_Digit(num):\n    return num % 10"}
{"task_id": "Mbpp/436", "completion": "def neg_nos(lst):\n    return [num for num in lst if num < 0]"}
{"task_id": "Mbpp/437", "completion": "def remove_odd(s):\n    return ''.join([s[i] for i in range(len(s)) if i % 2 == 0])"}
{"task_id": "Mbpp/439", "completion": "def multiple_to_single(lst):\n    return int(''.join(map(str, lst)))"}
{"task_id": "Mbpp/440", "completion": "def find_adverb_position(sentence):\n    adverbs = ['clearly', 'easily', 'often', 'always', 'never', 'simply', 'just', 'really', 'too', 'fairly', 'absolutely', 'clearly', 'definitely', 'completely', 'entirely', 'fully', 'greatly', 'highly', 'intensely', 'largely', 'literally', 'mainly', 'marriedly', 'merely', 'nearly', 'normally', 'perfectly', 'precisely', 'radically', 'rapidly', 'rapturously', 'really', 'remarkably', 'scarcely', 'severely', 'sharply', 'significantly', 'simply', 'specifically', 'strongly', 'tediously', 'tremendously', 'urgently', 'vastly', 'violently', 'wildly', 'wrongly']\n    words = sentence.split()\n    for i in range(len(words)):\n        if words[i] in adverbs:\n            return (i, i+1, words[i])\n    return None"}
{"task_id": "Mbpp/441", "completion": "def surfacearea_cube(size):\n    return 6 * size ** 2"}
{"task_id": "Mbpp/445", "completion": "def index_multiplication(t1, t2):\n    return tuple(a*b for a, b in zip(t1, t2))"}
{"task_id": "Mbpp/446", "completion": "def count_Occurrence(tup, lst):\n    count = 0\n    for i in lst:\n        count += tup.count(i)\n    return count"}
{"task_id": "Mbpp/447", "completion": "def cube_nums(nums):\n    return [num**3 for num in nums]"}
{"task_id": "Mbpp/448", "completion": "def cal_sum(n):\n    perrin = [3, 0, 2]\n    if n < 3:\n        return perrin[n]\n    for i in range(3, n):\n        perrin.append(perrin[i-2] + perrin[i-3])\n    return sum(perrin)"}
{"task_id": "Mbpp/450", "completion": "def extract_string(lst, size):\n    return [s for s in lst if len(s) == size]"}
{"task_id": "Mbpp/451", "completion": "def remove_whitespaces(s):\n    return s.replace(\" \", \"\")"}
{"task_id": "Mbpp/453", "completion": "def sumofFactors(n):\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"}
{"task_id": "Mbpp/454", "completion": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/455", "completion": "def check_monthnumb_number(month_number):\n    if month_number in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/456", "completion": "def reverse_string_list(string_list):\n    return [s[::-1] for s in string_list]"}
{"task_id": "Mbpp/457", "completion": "def Find_Min(lst):\n    min_len = min(len(sublist) for sublist in lst)\n    for sublist in lst:\n        if len(sublist) == min_len:\n            return sublist"}
{"task_id": "Mbpp/458", "completion": "def rectangle_area(length, width):\n    return length * width"}
{"task_id": "Mbpp/459", "completion": "def remove_uppercase(s):\n    result = ''\n    for char in s:\n        if not char.isupper():\n            result += char\n    return result"}
{"task_id": "Mbpp/460", "completion": "def Extract(lst):\n    return [sublist[0] for sublist in lst]"}
{"task_id": "Mbpp/462", "completion": "def combinations_list(lst):\n    result = [[]]\n    for i in lst:\n        result += [j + [i] for j in result]\n    return result"}
{"task_id": "Mbpp/463", "completion": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n\n    for num in arr[1:]:\n        if num == 0:\n            max_product = 1\n            min_product = 1\n            continue\n\n        temp_max = max_product\n        max_product = max(num, max_product * num, min_product * num)\n        min_product = min(num, temp_max * num, min_product * num)\n\n        result = max(result, max_product)\n\n    return result"}
{"task_id": "Mbpp/465", "completion": "def drop_empty(d):\n    return {k: v for k, v in d.items() if v is not None}"}
{"task_id": "Mbpp/468", "completion": "def max_product(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    max_product = [0]*n\n    max_product[0] = arr[0]\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                max_product[i] = max(max_product[i], max_product[j]*arr[i])\n        if max_product[i] == 0:\n            max_product[i] = arr[i]\n    return max(max_product)"}
{"task_id": "Mbpp/470", "completion": "def add_pairwise(tup):\n    return tuple(tup[i] + tup[i+1] for i in range(len(tup)-1))"}
{"task_id": "Mbpp/471", "completion": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"}
{"task_id": "Mbpp/472", "completion": "def check_Consecutive(lst):\n    return sorted(lst) == list(range(min(lst), max(lst)+1))"}
{"task_id": "Mbpp/473", "completion": "def tuple_intersection(tuple_list1, tuple_list2):\n    intersection = set()\n    for tup1 in tuple_list1:\n        for tup2 in tuple_list2:\n            if set(tup1) == set(tup2):\n                intersection.add(tup1)\n    return intersection"}
{"task_id": "Mbpp/474", "completion": "def replace_char(s, old, new):\n    return s.replace(old, new)"}
{"task_id": "Mbpp/475", "completion": "def sort_counter(dictionary):\n    return sorted(dictionary.items(), key=lambda x: x[1])"}
{"task_id": "Mbpp/476", "completion": "def big_sum(arr):\n    return max(arr) + min(arr)"}
{"task_id": "Mbpp/477", "completion": "def is_lower(string):\n    return string.lower()"}
{"task_id": "Mbpp/478", "completion": "def remove_lowercase(s):\n    result = \"\"\n    for char in s:\n        if char.isupper():\n            result += char\n    return result"}
{"task_id": "Mbpp/479", "completion": "def first_Digit(num):\n    while num >= 10:\n        num //= 10\n    return num"}
{"task_id": "Mbpp/554", "completion": "def Split(lst):\n    return [i for i in lst if i % 2 != 0]"}
{"task_id": "Mbpp/555", "completion": "def difference(n):\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_numbers = sum([i for i in range(1, n+1)])\n    return sum_of_cubes - sum_of_numbers"}
{"task_id": "Mbpp/556", "completion": "def find_Odd_Pair(arr, n): \n    count = 0\n    for i in range(n): \n        for j in range(i+1, n): \n            if (arr[i] ^ arr[j]) % 2 != 0: \n                count += 1\n    return count"}
{"task_id": "Mbpp/557", "completion": "def toggle_string(s):\n    return s.swapcase()"}
{"task_id": "Mbpp/558", "completion": "def digit_distance_nums(a, b):\n    sum_diff = 0\n    for i in str(a):\n        for j in str(b):\n            sum_diff += abs(int(i) - int(j))\n    return sum_diff"}
{"task_id": "Mbpp/559", "completion": "def max_sub_array_sum(arr, n):\n    max_so_far = arr[0]\n    curr_max = arr[0]\n\n    for i in range(1, n):\n        curr_max = max(arr[i], curr_max + arr[i])\n        max_so_far = max(max_so_far, curr_max)\n\n    return max_so_far"}
{"task_id": "Mbpp/560", "completion": "def union_elements(t1, t2):\n    union = t1 + t2\n    return tuple(sorted(set(union)))"}
{"task_id": "Mbpp/562", "completion": "def Find_Max_Length(lst):\n    max_length = 0\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length"}
{"task_id": "Mbpp/563", "completion": "def extract_values(s):\n    values = []\n    current_value = \"\"\n    in_quotes = False\n\n    for char in s:\n        if char == '\"':\n            in_quotes = not in_quotes\n            if not in_quotes:\n                values.append(current_value)\n                current_value = \"\"\n        elif in_quotes:\n            current_value += char\n\n    return values"}
{"task_id": "Mbpp/564", "completion": "def count_Pairs(lst, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if lst[i] != lst[j]:\n                count += 1\n    return count"}
{"task_id": "Mbpp/565", "completion": "def split(s):\n    return list(s)"}
{"task_id": "Mbpp/566", "completion": "def sum_digits(n):\n    return sum(int(digit) for digit in str(n))"}
{"task_id": "Mbpp/567", "completion": "def issort_list(lst):\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))"}
{"task_id": "Mbpp/568", "completion": "def empty_list(n):\n    return [{} for _ in range(n)]"}
{"task_id": "Mbpp/569", "completion": "def sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]"}
{"task_id": "Mbpp/572", "completion": "def two_unique_nums(nums):\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"}
{"task_id": "Mbpp/573", "completion": "def unique_product(lst):\n    unique_nums = set(lst)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"}
{"task_id": "Mbpp/576", "completion": "def is_Sub_Array(arr1, arr2):\n    return arr2 in [arr1[i: len(arr2) + i] for i in range(len(arr1) - len(arr2) + 1)]"}
{"task_id": "Mbpp/577", "completion": "def last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    else:\n        factorial = 1\n        for i in range(1, n + 1):\n            factorial *= i\n        return factorial % 10"}
{"task_id": "Mbpp/578", "completion": "def interleave_lists(list1, list2, list3):\n    return [val for pair in zip(list1, list2, list3) for val in pair]"}
{"task_id": "Mbpp/579", "completion": "def find_dissimilar(t1, t2):\n    return tuple(set(t1) ^ set(t2))"}
{"task_id": "Mbpp/580", "completion": "def extract_even(t):\n    result = []\n    for i in t:\n        if isinstance(i, tuple):\n            result.append(extract_even(i))\n        elif i % 2 == 0:\n            result.append(i)\n    return tuple(result)"}
{"task_id": "Mbpp/581", "completion": "def surface_Area(base_edge, height):\n    # Calculate the slant height\n    slant_height = (base_edge / 2) ** 2 + height ** 2\n    slant_height = slant_height ** 0.5\n\n    # Calculate the surface area\n    surface_area = base_edge ** 2 + 2 * base_edge * slant_height\n\n    return surface_area"}
{"task_id": "Mbpp/583", "completion": "def catalan_number(n):\n    if n <= 1:\n        return 1\n    res = 0\n    for i in range(n):\n        res += catalan_number(i) * catalan_number(n-i-1)\n    return res"}
{"task_id": "Mbpp/585", "completion": "def expensive_items(items, n):\n    sorted_items = sorted(items, key=lambda x: x['price'], reverse=True)\n    return sorted_items[:n]"}
{"task_id": "Mbpp/586", "completion": "def split_Arr(arr, n):\n    first_part = arr[:n]\n    second_part = arr[n:]\n    second_part.extend(first_part)\n    return second_part"}
{"task_id": "Mbpp/587", "completion": "def list_tuple(lst):\n    return tuple(lst)"}
{"task_id": "Mbpp/588", "completion": "def big_diff(nums):\n    return max(nums) - min(nums)"}
{"task_id": "Mbpp/589", "completion": "def perfect_squares(start, end):\n    result = []\n    for i in range(start, end+1):\n        if i**0.5 == int(i**0.5):\n            result.append(i)\n    return result"}
{"task_id": "Mbpp/590", "completion": "import cmath\n\ndef polar_rect(r, theta):\n    return cmath.rect(r * cmath.cos(theta), r * cmath.sin(theta))"}
{"task_id": "Mbpp/591", "completion": "def swap_List(lst):\n    lst[0], lst[-1] = lst[-1], lst[0]\n    return lst"}
{"task_id": "Mbpp/592", "completion": "from math import comb\n\ndef sum_Of_product(n):\n    total = 0\n    for i in range(n):\n        total += comb(n, i) * comb(n, i+1)\n    return total"}
{"task_id": "Mbpp/593", "completion": "def removezero_ip(ip):\n    return '.'.join(str(int(i)) for i in ip.split('.'))"}
{"task_id": "Mbpp/594", "completion": "def diff_even_odd(lst):\n    even = next((x for x in lst if x % 2 == 0), None)\n    odd = next((x for x in lst if x % 2 != 0), None)\n    return even - odd if even and odd else None"}
{"task_id": "Mbpp/596", "completion": "import sys\n\ndef tuple_size(t):\n    return sys.getsizeof(t)"}
{"task_id": "Mbpp/597", "completion": "def find_kth(arr1, arr2, k):\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            if i + j == k - 1:\n                return arr1[i]\n            i += 1\n        else:\n            if i + j == k - 1:\n                return arr2[j]\n            j += 1\n    while i < len(arr1):\n        if i + j == k - 1:\n            return arr1[i]\n        i += 1\n    while j < len(arr2):\n        if i + j == k - 1:\n            return arr2[j]\n        j += 1\n    return -1"}
{"task_id": "Mbpp/598", "completion": "def armstrong_number(num):\n    # initialize sum\n    sum = 0\n\n    # find sum of nth power of digits\n    temp = num\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n\n    # return true or false\n    return sum == num"}
{"task_id": "Mbpp/599", "completion": "def sum_average(n):\n    sum_n = n * (n + 1) // 2\n    avg_n = sum_n / n\n    return sum_n, avg_n"}
{"task_id": "Mbpp/600", "completion": "def is_Even(n):\n    return n % 2 == 0"}
{"task_id": "Mbpp/602", "completion": "def first_repeated_char(s):\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None"}
{"task_id": "Mbpp/603", "completion": "def get_ludic(n):\n    ludic_numbers = []\n    for i in range(1, n+1):\n        if i % 2 == 1 and i % 3 == 2 and i % 5 == 3 and i % 7 == 4:\n            ludic_numbers.append(i)\n    return ludic_numbers"}
{"task_id": "Mbpp/604", "completion": "def reverse_words(s):\n    return ' '.join(s.split(' ')[::-1])"}
{"task_id": "Mbpp/605", "completion": "def prime_num(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/606", "completion": "import math\n\ndef radian_degree(deg):\n    return math.radians(deg)"}
{"task_id": "Mbpp/607", "completion": "import re\n\ndef find_literals(s, pattern):\n    match = re.search(pattern, s)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"}
{"task_id": "Mbpp/608", "completion": "def bell_Number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]"}
{"task_id": "Mbpp/610", "completion": "def remove_kth_element(lst, k):\n    return lst[:k] + lst[k+1:]"}
{"task_id": "Mbpp/611", "completion": "def max_of_nth(matrix, n):\n    return max(row[n] for row in matrix)"}
{"task_id": "Mbpp/612", "completion": "def merge(lst):\n    return [list(x) for x in zip(*lst)]"}
{"task_id": "Mbpp/614", "completion": "def cummulative_sum(tuple_list):\n    total = 0\n    for tup in tuple_list:\n        total += sum(tup)\n    return total"}
{"task_id": "Mbpp/615", "completion": "def average_tuple(tuples):\n    averages = []\n    for tup in tuples:\n        averages.append(sum(tup) / len(tup))\n    return averages"}
{"task_id": "Mbpp/616", "completion": "def tuple_modulo(t1, t2):\n    return tuple(a % b for a, b in zip(t1, t2))"}
{"task_id": "Mbpp/618", "completion": "def div_list(list1, list2):\n    return [a / b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/619", "completion": "def move_num(s):\n    nums = [c for c in s if c.isdigit()]\n    chars = [c for c in s if not c.isdigit()]\n    return ''.join(chars) + ''.join(nums)"}
{"task_id": "Mbpp/620", "completion": "def largest_subset(nums):\n    nums.sort()\n    dp = [1] * len(nums)\n    for i in range(1, len(nums)):\n        for j in range(i):\n            if nums[i] % nums[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)"}
{"task_id": "Mbpp/622", "completion": "def get_median(list1, list2, n):\n    merged_list = sorted(list1 + list2)\n    if n % 2 == 0:\n        return (merged_list[n//2 - 1] + merged_list[n//2]) / 2\n    else:\n        return merged_list[n//2]"}
{"task_id": "Mbpp/623", "completion": "def nth_nums(nums, n):\n    return [num**n for num in nums]"}
{"task_id": "Mbpp/624", "completion": "def is_upper(string):\n    return string.upper()"}
{"task_id": "Mbpp/626", "completion": "import math\n\ndef triangle_area(radius):\n    if radius < 0:\n        return None\n    else:\n        return (math.pi * radius ** 2) / 2"}
{"task_id": "Mbpp/628", "completion": "def replace_spaces(s):\n    return s.replace(' ', '%20')"}
{"task_id": "Mbpp/629", "completion": "def Split(numbers):\n    return [num for num in numbers if num % 2 == 0]"}
{"task_id": "Mbpp/630", "completion": "def get_coordinates(coord):\n    x, y = coord\n    adjacent_coords = []\n    for i in range(x-1, x+2):\n        for j in range(y-1, y+2):\n            if (i, j) != coord:\n                adjacent_coords.append([i, j])\n    return adjacent_coords"}
{"task_id": "Mbpp/631", "completion": "def replace_spaces(s):\n    return s.replace(' ', '_')"}
{"task_id": "Mbpp/632", "completion": "def move_zero(lst):\n    non_zero = [x for x in lst if x != 0]\n    zero = [0] * (len(lst) - len(non_zero))\n    return non_zero + zero"}
{"task_id": "Mbpp/633", "completion": "def pair_xor_Sum(lst, n):\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum += lst[i] ^ lst[j]\n    return sum"}
{"task_id": "Mbpp/635", "completion": "def heap_sort(lst):\n    def heapify(lst, n, i):\n        largest = i\n        l = 2 * i + 1\n        r = 2 * i + 2\n\n        if l < n and lst[i] < lst[l]:\n            largest = l\n\n        if r < n and lst[largest] < lst[r]:\n            largest = r\n\n        if largest != i:\n            lst[i], lst[largest] = lst[largest], lst[i]\n            heapify(lst, n, largest)\n\n    n = len(lst)\n\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(lst, n, i)\n\n    for i in range(n-1, 0, -1):\n        lst[i], lst[0] = lst[0], lst[i]\n        heapify(lst, i, 0)\n\n    return lst"}
{"task_id": "Mbpp/637", "completion": "def noprofit_noloss(buy_price, sell_price):\n    if buy_price == sell_price:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/638", "completion": "def wind_chill(velocity, temperature):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    wind_chill_index = 13.12 + 0.6215*temperature - 11.37*velocity**0.16 + 0.3965*temperature*velocity**0.16\n    return round(wind_chill_index)"}
{"task_id": "Mbpp/639", "completion": "def sum_length(names):\n    total_length = 0\n    for name in names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length"}
{"task_id": "Mbpp/641", "completion": "def is_nonagonal(n):\n    return n*(7*n-5)//2"}
{"task_id": "Mbpp/643", "completion": "def text_match_wordz_middle(text):\n    words = text.split()\n    for word in words:\n        if word[0] == 'z' or word[-1] == 'z':\n            return False\n        if 'z' in word[1:-1]:\n            return True\n    return False"}
{"task_id": "Mbpp/644", "completion": "def reverse_Array_Upto_K(arr, k):\n    arr[:k] = arr[:k][::-1]\n    return arr"}
{"task_id": "Mbpp/720", "completion": "def add_dict_to_tuple(t, d):\n    return t + (d,)"}
{"task_id": "Mbpp/721", "completion": "def maxAverageOfPath(matrix):\n    n = len(matrix)\n    dp = [[0]*n for _ in range(n)]\n    dp[0][0] = matrix[0][0]\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n        dp[0][i] = dp[0][i-1] + matrix[0][i]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j]\n    return dp[n-1][n-1] / (n*n)"}
{"task_id": "Mbpp/722", "completion": "def filter_data(students, min_height, min_weight):\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > min_height and weight > min_weight}"}
{"task_id": "Mbpp/723", "completion": "def count_same_pair(list1, list2):\n    return sum(1 for x, y in zip(list1, list2) if x == y)"}
{"task_id": "Mbpp/724", "completion": "def power_base_sum(base, power):\n    result = base ** power\n    return sum(int(digit) for digit in str(result))"}
{"task_id": "Mbpp/725", "completion": "def extract_quotation(s):\n    result = []\n    start = 0\n    while start < len(s):\n        start = s.find('\"', start)\n        if start == -1:\n            break\n        end = s.find('\"', start + 1)\n        result.append(s[start + 1:end])\n        start = end\n    return result"}
{"task_id": "Mbpp/726", "completion": "def multiply_elements(t):\n    return tuple(t[i] * t[i+1] for i in range(len(t)-1))"}
{"task_id": "Mbpp/728", "completion": "def sum_list(list1, list2):\n    return [a + b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/730", "completion": "def consecutive_duplicates(lst):\n    result = []\n    for i in range(len(lst)):\n        if i == 0 or lst[i] != lst[i-1]:\n            result.append(lst[i])\n    return result"}
{"task_id": "Mbpp/731", "completion": "import math\n\ndef lateralsurface_cone(r, h):\n    return math.pi * r * math.sqrt(r**2 + h**2)"}
{"task_id": "Mbpp/732", "completion": "def replace_specialchar(s):\n    for char in [' ', ',', '.']:\n        s = s.replace(char, ':')\n    return s"}
{"task_id": "Mbpp/733", "completion": "def find_first_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result"}
{"task_id": "Mbpp/734", "completion": "def sum_Of_Subarray_Prod(lst):\n    n = len(lst)\n    total_sum = 0\n    for i in range(n):\n        sublist_prod = 1\n        for j in range(i, n):\n            sublist_prod *= lst[j]\n            total_sum += sublist_prod\n    return total_sum"}
{"task_id": "Mbpp/735", "completion": "def toggle_middle_bits(n):\n    # Find the number of bits in n\n    num_bits = n.bit_length()\n\n    # Toggle all bits except the first and last bit\n    mask = (1 << (num_bits - 1)) | 1\n    return n ^ mask"}
{"task_id": "Mbpp/736", "completion": "def left_insertion(arr, value):\n    left, right = 0, len(arr)\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] < value:\n            left = mid + 1\n        else:\n            right = mid\n    return left"}
{"task_id": "Mbpp/737", "completion": "import re\n\ndef check_str(s):\n    pattern = r'^[aeiou]'\n    if re.match(pattern, s, re.IGNORECASE):\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/739", "completion": "def find_Index(n):\n    i = 1\n    while True:\n        triangular_number = i*(i+1)//2\n        if len(str(triangular_number)) == n:\n            return i\n        i += 1"}
{"task_id": "Mbpp/740", "completion": "def tuple_to_dict(t):\n    return {t[i]: t[i+1] for i in range(0, len(t), 2)}"}
{"task_id": "Mbpp/741", "completion": "def all_Characters_Same(s):\n    return len(set(s)) == 1"}
{"task_id": "Mbpp/742", "completion": "import math\n\ndef area_tetrahedron(a):\n    return math.sqrt(3) * a**2"}
{"task_id": "Mbpp/743", "completion": "def rotate_right(lst, n):\n    return lst[-n:] + lst[:-n]"}
{"task_id": "Mbpp/744", "completion": "def check_none(tup):\n    return None in tup"}
{"task_id": "Mbpp/745", "completion": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        if all(num % int(digit) == 0 for digit in str(num)):\n            result.append(num)\n    return result"}
{"task_id": "Mbpp/748", "completion": "def capital_words_spaces(s):\n    words = s.split(' ')\n    new_words = []\n    for word in words:\n        if word[0].isupper():\n            new_words.append(word)\n        else:\n            new_words.append(' ' + word)\n    return ''.join(new_words)"}
{"task_id": "Mbpp/749", "completion": "def sort_numeric_strings(lst):\n    return sorted(lst, key=int)"}
{"task_id": "Mbpp/750", "completion": "def add_tuple(lst, tup):\n    return lst + list(tup)"}
{"task_id": "Mbpp/751", "completion": "def check_min_heap(arr):\n    n = len(arr)\n    for i in range(n // 2):\n        if 2 * i + 1 < n and arr[i] > arr[2 * i + 1]:\n            return False\n        if 2 * i + 2 < n and arr[i] > arr[2 * i + 2]:\n            return False\n    return True"}
{"task_id": "Mbpp/752", "completion": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * jacobsthal_num(n - 1) + jacobsthal_num(n - 2)"}
{"task_id": "Mbpp/753", "completion": "def min_k(records, k):\n    sorted_records = sorted(records, key=lambda x: x[1])\n    return sorted_records[:k]"}
{"task_id": "Mbpp/754", "completion": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"}
{"task_id": "Mbpp/755", "completion": "def second_smallest(numbers):\n    # Initialize two variables to infinity\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    # Iterate over the list\n    for num in numbers:\n        # If the current number is smaller than the smallest, update both variables\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        # If the current number is larger than the smallest but smaller than the second smallest, update the second smallest\n        elif num < second_smallest:\n            second_smallest = num\n\n    return second_smallest"}
{"task_id": "Mbpp/757", "completion": "def count_reverse_pairs(strings):\n    count = 0\n    for i in range(len(strings)):\n        for j in range(i+1, len(strings)):\n            if strings[i] == strings[j][::-1]:\n                count += 1\n    return count"}
{"task_id": "Mbpp/758", "completion": "def unique_sublists(lst):\n    count_dict = {}\n    for sublist in lst:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in count_dict:\n            count_dict[sublist_tuple] += 1\n        else:\n            count_dict[sublist_tuple] = 1\n    return count_dict"}
{"task_id": "Mbpp/759", "completion": "def is_decimal(s):\n    try:\n        float(s)\n        return True\n    except ValueError:\n        return False"}
{"task_id": "Mbpp/760", "completion": "def unique_Element(lst):\n    return len(set(lst)) == 1"}
{"task_id": "Mbpp/762", "completion": "def check_monthnumber_number(month_number):\n    if month_number in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/763", "completion": "def find_min_diff(arr, n):\n    min_diff = float('inf')\n    for i in range(n-1):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"}
{"task_id": "Mbpp/764", "completion": "def number_ctr(s):\n    count = 0\n    for char in s:\n        if char.isdigit():\n            count += 1\n    return count"}
{"task_id": "Mbpp/765", "completion": "def is_polite(n):\n    # Initialize result\n    res = 0\n\n    # Keep track of number of set bits\n    count = 0\n\n    # Run a loop from 31 to 0\n    for i in range(31, -1, -1):\n\n        # Check if the i-th bit of n is set or not\n        if (n & (1 << i)):\n\n            # If set, then increment count\n            count += 1\n\n        # If count is odd, then set the i-th bit of res\n        if count % 2 == 1:\n            res |= (1 << i)\n\n    # Return the result\n    return res"}
{"task_id": "Mbpp/766", "completion": "def pair_wise(lst):\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]"}
{"task_id": "Mbpp/767", "completion": "def get_pairs_count(nums, sum):\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == sum:\n                count += 1\n    return count"}
{"task_id": "Mbpp/769", "completion": "def Diff(li1, li2):\n    return [i for i in li1 + li2 if i not in li1 or i not in li2]"}
{"task_id": "Mbpp/770", "completion": "def odd_num_sum(n):\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**4\n    return sum"}
{"task_id": "Mbpp/771", "completion": "def check_expression(expression):\n    stack = []\n    opening_brackets = ['(', '{', '[']\n    closing_brackets = [')', '}', ']']\n    bracket_pairs = {')': '(', '}': '{', ']': '['}\n\n    for char in expression:\n        if char in opening_brackets:\n            stack.append(char)\n        elif char in closing_brackets:\n            if not stack or stack.pop() != bracket_pairs[char]:\n                return False\n\n    return not stack"}
{"task_id": "Mbpp/772", "completion": "def remove_length(s, k):\n    return ' '.join([word for word in s.split() if len(word) != k])"}
{"task_id": "Mbpp/773", "completion": "def occurrence_substring(s, sub):\n    start = s.find(sub)\n    if start == -1:\n        return None\n    else:\n        return (sub, start, start + len(sub) - 1)"}
{"task_id": "Mbpp/775", "completion": "def odd_position(lst):\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/777", "completion": "def find_sum(lst):\n    unique_elements = set(lst)\n    return sum(unique_elements)"}
{"task_id": "Mbpp/778", "completion": "def pack_consecutive_duplicates(lst):\n    if not lst:\n        return []\n\n    result = [[lst[0]]]\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i-1]:\n            result[-1].append(lst[i])\n        else:\n            result.append([lst[i]])\n    return result"}
{"task_id": "Mbpp/780", "completion": "from itertools import combinations\n\ndef find_combinations(tuples):\n    result = []\n    for i in range(1, len(tuples) + 1):\n        for combo in combinations(tuples, i):\n            result.append((sum(x[0] for x in combo), sum(x[1] for x in combo)))\n    return result"}
{"task_id": "Mbpp/781", "completion": "def count_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0"}
{"task_id": "Mbpp/782", "completion": "def odd_length_sum(arr):\n    total_sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr), 2):\n            total_sum += sum(arr[i:j+1])\n    return total_sum"}
{"task_id": "Mbpp/784", "completion": "def mul_even_odd(lst):\n    even = None\n    odd = None\n    for num in lst:\n        if num % 2 == 0:\n            if even is None:\n                even = num\n            else:\n                return even * num\n        else:\n            if odd is None:\n                odd = num\n            else:\n                return odd * num\n    return None"}
{"task_id": "Mbpp/785", "completion": "def tuple_str_int(s):\n    return tuple(map(int, s.strip('()').split(',')))"}
{"task_id": "Mbpp/786", "completion": "def right_insertion(arr, target):\n    left, right = 0, len(arr)\n    while left < right:\n        mid = left + (right - left) // 2\n        if arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid\n    return left"}
{"task_id": "Mbpp/787", "completion": "import re\n\ndef text_match_three(text):\n    pattern = 'ab{3}$'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/788", "completion": "def new_tuple(lst, string):\n    return tuple(lst + [string])"}
{"task_id": "Mbpp/790", "completion": "def even_position(lst):\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            return False\n    return True"}
{"task_id": "Mbpp/791", "completion": "def remove_nested(t):\n    return tuple(x for x in t if not isinstance(x, tuple))"}
{"task_id": "Mbpp/792", "completion": "def count_list(lst):\n    return len(lst)"}
{"task_id": "Mbpp/793", "completion": "def last(arr, x):\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i] == x:\n            return i\n    return -1"}
{"task_id": "Mbpp/794", "completion": "def text_starta_endb(s):\n    return s.startswith('a') and s.endswith('b')"}
{"task_id": "Mbpp/796", "completion": "def return_sum(dictionary):\n    return sum(dictionary.values())"}
{"task_id": "Mbpp/797", "completion": "def sum_in_range(l, r):\n    return sum(i for i in range(l, r+1) if i % 2 != 0)"}
{"task_id": "Mbpp/798", "completion": "def _sum(arr):\n    return sum(arr)"}
{"task_id": "Mbpp/799", "completion": "def left_rotate(n, d):\n    return (n << d)|(n >> (32 - d))"}
{"task_id": "Mbpp/800", "completion": "def remove_all_spaces(s):\n    return s.replace(\" \", \"\")"}
{"task_id": "Mbpp/801", "completion": "def test_three_equal(a, b, c):\n    if a == b == c:\n        return 3\n    elif a == b or b == c or a == c:\n        return 2\n    else:\n        return 0"}
{"task_id": "Mbpp/803", "completion": "def is_perfect_square(n):\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    x = n\n    y = (x + 1) // 2\n    while y < x:\n        x = y\n        y = (x + n // x) // 2\n    return x * x == n"}
{"task_id": "Mbpp/804", "completion": "def is_product_even(numbers):\n    product = 1\n    for number in numbers:\n        product *= number\n    return product % 2 == 0"}
{"task_id": "Mbpp/805", "completion": "def max_sum_list(lst):\n    max_sum = -float('inf')\n    max_list = []\n    for sublist in lst:\n        if sum(sublist) > max_sum:\n            max_sum = sum(sublist)\n            max_list = sublist\n    return max_list"}
{"task_id": "Mbpp/806", "completion": "def max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n\n    for char in s:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n\n    return max_run"}
{"task_id": "Mbpp/807", "completion": "def first_odd(numbers):\n    for num in numbers:\n        if num % 2 != 0:\n            return num\n    return None"}
{"task_id": "Mbpp/808", "completion": "def check_K(tup, k):\n    return k in tup"}
{"task_id": "Mbpp/809", "completion": "def check_smaller(t1, t2):\n    for i in range(len(t1)):\n        if t1[i] >= t2[i]:\n            return False\n    return True"}
